package com.ebupt.yuebox.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ebupt.yuebox.model.SetupTask;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table SETUP_TASK.
*/
public class SetupTaskDao extends AbstractDao<SetupTask, String> {

    public static final String TABLENAME = "SETUP_TASK";

    /**
     * Properties of entity SetupTask.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Task_id = new Property(0, String.class, "task_id", true, "TASK_ID");
        public final static Property Task_publish_time = new Property(1, Long.class, "task_publish_time", false, "TASK_PUBLISH_TIME");
        public final static Property Task_start_time = new Property(2, Long.class, "task_start_time", false, "TASK_START_TIME");
        public final static Property Task_end_time = new Property(3, Long.class, "task_end_time", false, "TASK_END_TIME");
        public final static Property Task_client_name = new Property(4, String.class, "task_client_name", false, "TASK_CLIENT_NAME");
        public final static Property Task_client_address = new Property(5, String.class, "task_client_address", false, "TASK_CLIENT_ADDRESS");
        public final static Property Task_client_lng = new Property(6, Integer.class, "task_client_lng", false, "TASK_CLIENT_LNG");
        public final static Property Task_client_lat = new Property(7, Integer.class, "task_client_lat", false, "TASK_CLIENT_LAT");
        public final static Property Task_client_tel = new Property(8, String.class, "task_client_tel", false, "TASK_CLIENT_TEL");
        public final static Property Task_client_mobile = new Property(9, String.class, "task_client_mobile", false, "TASK_CLIENT_MOBILE");
        public final static Property Task_box_num = new Property(10, Integer.class, "task_box_num", false, "TASK_BOX_NUM");
        public final static Property Task_get_userid = new Property(11, String.class, "task_get_userid", false, "TASK_GET_USERID");
        public final static Property Task_status = new Property(12, String.class, "task_status", false, "TASK_STATUS");
        public final static Property Task_grab_credits = new Property(13, Integer.class, "task_grab_credits", false, "TASK_GRAB_CREDITS");
        public final static Property Task_finish_credits = new Property(14, Integer.class, "task_finish_credits", false, "TASK_FINISH_CREDITS");
        public final static Property Task_finish_comment_factor = new Property(15, Double.class, "task_finish_comment_factor", false, "TASK_FINISH_COMMENT_FACTOR");
        public final static Property Task_finish_comment = new Property(16, String.class, "task_finish_comment", false, "TASK_FINISH_COMMENT");
        public final static Property Task_boxids = new Property(17, String.class, "task_boxids", false, "TASK_BOXIDS");
        public final static Property Task_edittime = new Property(18, Long.class, "task_edittime", false, "TASK_EDITTIME");
        public final static Property Task_client_person = new Property(19, String.class, "task_client_person", false, "TASK_CLIENT_PERSON");
        public final static Property Task_outstorage_id = new Property(20, String.class, "task_outstorage_id", false, "TASK_OUTSTORAGE_ID");
    };


    public SetupTaskDao(DaoConfig config) {
        super(config);
    }
    
    public SetupTaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'SETUP_TASK' (" + //
                "'TASK_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: task_id
                "'TASK_PUBLISH_TIME' INTEGER," + // 1: task_publish_time
                "'TASK_START_TIME' INTEGER," + // 2: task_start_time
                "'TASK_END_TIME' INTEGER," + // 3: task_end_time
                "'TASK_CLIENT_NAME' TEXT," + // 4: task_client_name
                "'TASK_CLIENT_ADDRESS' TEXT," + // 5: task_client_address
                "'TASK_CLIENT_LNG' INTEGER," + // 6: task_client_lng
                "'TASK_CLIENT_LAT' INTEGER," + // 7: task_client_lat
                "'TASK_CLIENT_TEL' TEXT," + // 8: task_client_tel
                "'TASK_CLIENT_MOBILE' TEXT," + // 9: task_client_mobile
                "'TASK_BOX_NUM' INTEGER," + // 10: task_box_num
                "'TASK_GET_USERID' TEXT," + // 11: task_get_userid
                "'TASK_STATUS' TEXT," + // 12: task_status
                "'TASK_GRAB_CREDITS' INTEGER," + // 13: task_grab_credits
                "'TASK_FINISH_CREDITS' INTEGER," + // 14: task_finish_credits
                "'TASK_FINISH_COMMENT_FACTOR' REAL," + // 15: task_finish_comment_factor
                "'TASK_FINISH_COMMENT' TEXT," + // 16: task_finish_comment
                "'TASK_BOXIDS' TEXT," + // 17: task_boxids
                "'TASK_EDITTIME' INTEGER," + // 18: task_edittime
                "'TASK_CLIENT_PERSON' TEXT," + // 19: task_client_person
                "'TASK_OUTSTORAGE_ID' TEXT);"); // 20: task_outstorage_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'SETUP_TASK'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SetupTask entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getTask_id());
 
        Long task_publish_time = entity.getTask_publish_time();
        if (task_publish_time != null) {
            stmt.bindLong(2, task_publish_time);
        }
 
        Long task_start_time = entity.getTask_start_time();
        if (task_start_time != null) {
            stmt.bindLong(3, task_start_time);
        }
 
        Long task_end_time = entity.getTask_end_time();
        if (task_end_time != null) {
            stmt.bindLong(4, task_end_time);
        }
 
        String task_client_name = entity.getTask_client_name();
        if (task_client_name != null) {
            stmt.bindString(5, task_client_name);
        }
 
        String task_client_address = entity.getTask_client_address();
        if (task_client_address != null) {
            stmt.bindString(6, task_client_address);
        }
 
        Integer task_client_lng = entity.getTask_client_lng();
        if (task_client_lng != null) {
            stmt.bindLong(7, task_client_lng);
        }
 
        Integer task_client_lat = entity.getTask_client_lat();
        if (task_client_lat != null) {
            stmt.bindLong(8, task_client_lat);
        }
 
        String task_client_tel = entity.getTask_client_tel();
        if (task_client_tel != null) {
            stmt.bindString(9, task_client_tel);
        }
 
        String task_client_mobile = entity.getTask_client_mobile();
        if (task_client_mobile != null) {
            stmt.bindString(10, task_client_mobile);
        }
 
        Integer task_box_num = entity.getTask_box_num();
        if (task_box_num != null) {
            stmt.bindLong(11, task_box_num);
        }
 
        String task_get_userid = entity.getTask_get_userid();
        if (task_get_userid != null) {
            stmt.bindString(12, task_get_userid);
        }
 
        String task_status = entity.getTask_status();
        if (task_status != null) {
            stmt.bindString(13, task_status);
        }
 
        Integer task_grab_credits = entity.getTask_grab_credits();
        if (task_grab_credits != null) {
            stmt.bindLong(14, task_grab_credits);
        }
 
        Integer task_finish_credits = entity.getTask_finish_credits();
        if (task_finish_credits != null) {
            stmt.bindLong(15, task_finish_credits);
        }
 
        Double task_finish_comment_factor = entity.getTask_finish_comment_factor();
        if (task_finish_comment_factor != null) {
            stmt.bindDouble(16, task_finish_comment_factor);
        }
 
        String task_finish_comment = entity.getTask_finish_comment();
        if (task_finish_comment != null) {
            stmt.bindString(17, task_finish_comment);
        }
 
        String task_boxids = entity.getTask_boxids();
        if (task_boxids != null) {
            stmt.bindString(18, task_boxids);
        }
 
        Long task_edittime = entity.getTask_edittime();
        if (task_edittime != null) {
            stmt.bindLong(19, task_edittime);
        }
 
        String task_client_person = entity.getTask_client_person();
        if (task_client_person != null) {
            stmt.bindString(20, task_client_person);
        }
 
        String task_outstorage_id = entity.getTask_outstorage_id();
        if (task_outstorage_id != null) {
            stmt.bindString(21, task_outstorage_id);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SetupTask readEntity(Cursor cursor, int offset) {
        SetupTask entity = new SetupTask( //
            cursor.getString(offset + 0), // task_id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // task_publish_time
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // task_start_time
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // task_end_time
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // task_client_name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // task_client_address
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // task_client_lng
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // task_client_lat
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // task_client_tel
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // task_client_mobile
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // task_box_num
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // task_get_userid
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // task_status
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // task_grab_credits
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // task_finish_credits
            cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15), // task_finish_comment_factor
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // task_finish_comment
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // task_boxids
            cursor.isNull(offset + 18) ? null : cursor.getLong(offset + 18), // task_edittime
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // task_client_person
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // task_outstorage_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SetupTask entity, int offset) {
        entity.setTask_id(cursor.getString(offset + 0));
        entity.setTask_publish_time(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTask_start_time(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setTask_end_time(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setTask_client_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTask_client_address(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTask_client_lng(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setTask_client_lat(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setTask_client_tel(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setTask_client_mobile(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTask_box_num(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setTask_get_userid(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTask_status(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTask_grab_credits(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setTask_finish_credits(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setTask_finish_comment_factor(cursor.isNull(offset + 15) ? null : cursor.getDouble(offset + 15));
        entity.setTask_finish_comment(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setTask_boxids(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setTask_edittime(cursor.isNull(offset + 18) ? null : cursor.getLong(offset + 18));
        entity.setTask_client_person(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setTask_outstorage_id(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(SetupTask entity, long rowId) {
        return entity.getTask_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(SetupTask entity) {
        if(entity != null) {
            return entity.getTask_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
