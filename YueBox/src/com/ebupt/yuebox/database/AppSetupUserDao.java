package com.ebupt.yuebox.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ebupt.yuebox.model.AppSetupUser;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table APP_SETUP_USER.
*/
public class AppSetupUserDao extends AbstractDao<AppSetupUser, String> {

    public static final String TABLENAME = "APP_SETUP_USER";

    /**
     * Properties of entity AppSetupUser.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property User_id = new Property(0, String.class, "user_id", true, "USER_ID");
        public final static Property User_name = new Property(1, String.class, "user_name", false, "USER_NAME");
        public final static Property User_password = new Property(2, String.class, "user_password", false, "USER_PASSWORD");
        public final static Property User_tel = new Property(3, String.class, "user_tel", false, "USER_TEL");
        public final static Property User_email = new Property(4, String.class, "user_email", false, "USER_EMAIL");
        public final static Property User_name_spell = new Property(5, String.class, "user_name_spell", false, "USER_NAME_SPELL");
        public final static Property User_job = new Property(6, String.class, "user_job", false, "USER_JOB");
        public final static Property User_grade = new Property(7, String.class, "user_grade", false, "USER_GRADE");
        public final static Property User_department = new Property(8, String.class, "user_department", false, "USER_DEPARTMENT");
        public final static Property User_total_credits = new Property(9, Integer.class, "user_total_credits", false, "USER_TOTAL_CREDITS");
        public final static Property User_year_credits = new Property(10, Integer.class, "user_year_credits", false, "USER_YEAR_CREDITS");
        public final static Property User_month_credits = new Property(11, Integer.class, "user_month_credits", false, "USER_MONTH_CREDITS");
        public final static Property User_week_credits = new Property(12, Integer.class, "user_week_credits", false, "USER_WEEK_CREDITS");
        public final static Property User_status = new Property(13, String.class, "user_status", false, "USER_STATUS");
        public final static Property User_edittime = new Property(14, Long.class, "user_edittime", false, "USER_EDITTIME");
        public final static Property User_token_id = new Property(15, String.class, "user_token_id", false, "USER_TOKEN_ID");
        public final static Property User_os_type = new Property(16, Integer.class, "user_os_type", false, "USER_OS_TYPE");
    };


    public AppSetupUserDao(DaoConfig config) {
        super(config);
    }
    
    public AppSetupUserDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'APP_SETUP_USER' (" + //
                "'USER_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: user_id
                "'USER_NAME' TEXT," + // 1: user_name
                "'USER_PASSWORD' TEXT," + // 2: user_password
                "'USER_TEL' TEXT," + // 3: user_tel
                "'USER_EMAIL' TEXT," + // 4: user_email
                "'USER_NAME_SPELL' TEXT," + // 5: user_name_spell
                "'USER_JOB' TEXT," + // 6: user_job
                "'USER_GRADE' TEXT," + // 7: user_grade
                "'USER_DEPARTMENT' TEXT," + // 8: user_department
                "'USER_TOTAL_CREDITS' INTEGER," + // 9: user_total_credits
                "'USER_YEAR_CREDITS' INTEGER," + // 10: user_year_credits
                "'USER_MONTH_CREDITS' INTEGER," + // 11: user_month_credits
                "'USER_WEEK_CREDITS' INTEGER," + // 12: user_week_credits
                "'USER_STATUS' TEXT," + // 13: user_status
                "'USER_EDITTIME' INTEGER," + // 14: user_edittime
                "'USER_TOKEN_ID' TEXT," + // 15: user_token_id
                "'USER_OS_TYPE' INTEGER);"); // 16: user_os_type
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'APP_SETUP_USER'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AppSetupUser entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUser_id());
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(2, user_name);
        }
 
        String user_password = entity.getUser_password();
        if (user_password != null) {
            stmt.bindString(3, user_password);
        }
 
        String user_tel = entity.getUser_tel();
        if (user_tel != null) {
            stmt.bindString(4, user_tel);
        }
 
        String user_email = entity.getUser_email();
        if (user_email != null) {
            stmt.bindString(5, user_email);
        }
 
        String user_name_spell = entity.getUser_name_spell();
        if (user_name_spell != null) {
            stmt.bindString(6, user_name_spell);
        }
 
        String user_job = entity.getUser_job();
        if (user_job != null) {
            stmt.bindString(7, user_job);
        }
 
        String user_grade = entity.getUser_grade();
        if (user_grade != null) {
            stmt.bindString(8, user_grade);
        }
 
        String user_department = entity.getUser_department();
        if (user_department != null) {
            stmt.bindString(9, user_department);
        }
 
        Integer user_total_credits = entity.getUser_total_credits();
        if (user_total_credits != null) {
            stmt.bindLong(10, user_total_credits);
        }
 
        Integer user_year_credits = entity.getUser_year_credits();
        if (user_year_credits != null) {
            stmt.bindLong(11, user_year_credits);
        }
 
        Integer user_month_credits = entity.getUser_month_credits();
        if (user_month_credits != null) {
            stmt.bindLong(12, user_month_credits);
        }
 
        Integer user_week_credits = entity.getUser_week_credits();
        if (user_week_credits != null) {
            stmt.bindLong(13, user_week_credits);
        }
 
        String user_status = entity.getUser_status();
        if (user_status != null) {
            stmt.bindString(14, user_status);
        }
 
        Long user_edittime = entity.getUser_edittime();
        if (user_edittime != null) {
            stmt.bindLong(15, user_edittime);
        }
 
        String user_token_id = entity.getUser_token_id();
        if (user_token_id != null) {
            stmt.bindString(16, user_token_id);
        }
 
        Integer user_os_type = entity.getUser_os_type();
        if (user_os_type != null) {
            stmt.bindLong(17, user_os_type);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AppSetupUser readEntity(Cursor cursor, int offset) {
        AppSetupUser entity = new AppSetupUser( //
            cursor.getString(offset + 0), // user_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // user_password
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // user_tel
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // user_email
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // user_name_spell
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // user_job
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // user_grade
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // user_department
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // user_total_credits
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // user_year_credits
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // user_month_credits
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // user_week_credits
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // user_status
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14), // user_edittime
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // user_token_id
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16) // user_os_type
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AppSetupUser entity, int offset) {
        entity.setUser_id(cursor.getString(offset + 0));
        entity.setUser_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUser_password(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUser_tel(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUser_email(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUser_name_spell(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUser_job(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUser_grade(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUser_department(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setUser_total_credits(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setUser_year_credits(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setUser_month_credits(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setUser_week_credits(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setUser_status(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setUser_edittime(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
        entity.setUser_token_id(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setUser_os_type(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(AppSetupUser entity, long rowId) {
        return entity.getUser_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(AppSetupUser entity) {
        if(entity != null) {
            return entity.getUser_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
