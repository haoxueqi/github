package com.ebupt.yuebox.fragment;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;

import org.json.JSONException;
import org.json.JSONObject;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.os.Handler;
import android.support.v4.app.Fragment;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.animation.Animation;
import android.view.animation.TranslateAnimation;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.SimpleAdapter;
import android.widget.TextView;
import android.widget.Toast;

import com.baidu.location.BDLocation;
import com.baidu.location.BDLocationListener;
import com.baidu.location.LocationClient;
import com.baidu.location.LocationClientOption;
import com.baidu.location.LocationClientOption.LocationMode;
import com.baidu.mapapi.BMapManager;
import com.baidu.mapapi.map.LocationData;
import com.baidu.mapapi.map.MapController;
import com.baidu.mapapi.map.MapView;
import com.baidu.mapapi.map.MyLocationOverlay;
import com.baidu.mapapi.map.OverlayItem;
import com.baidu.mapapi.utils.DistanceUtil;
import com.baidu.platform.comapi.basestruct.GeoPoint;
import com.ebupt.yuebox.R;
import com.ebupt.yuebox.application.MyApplication;
import com.ebupt.yuebox.database.DbUtil;
import com.ebupt.yuebox.model.AppSetupUser;
import com.ebupt.yuebox.model.MapWorkOrderPop;
import com.ebupt.yuebox.model.SetupTask;
import com.ebupt.yuebox.model.TimeStamp;
import com.ebupt.yuebox.net.NetEngine;
import com.ebupt.yuebox.ui.TaskDetailActivity;
import com.ebupt.yuebox.util.JsonParser;
import com.loopj.android.http.JsonHttpResponseHandler;

/**
 * 
 * @ClassName: MapFragment
 * @Description: 地图模式
 * @author ZhouZheChen
 * @date 2014-3-6
 * 
 */
public class OrderFragment extends Fragment {

	private MyApplication app;
	private MapView mMapView = null;
	private LocationClient mLocationClient = null;
	private LocationData locData;
	private MyLocationOverlay myLocationOverlay;
	private MapWorkOrderPop itemOverlay;
	private MapController mMapController;
	private boolean isFirstLoc = true;
	private Animation animationBottomUp;
	private TextView tv_bad_internet;
	private TextView tv_bad_internet1;
	private TextView tv_pop_name;
	private TextView tv_pop_address;
	private TextView tv_pop_box_num;
	private TextView tv_pop_credits;
	private ListView list_order;
	private RelativeLayout layout_map;
	private RelativeLayout layout_pop_view;
	private ImageView image_no_wifi;
	private ImageView image_title_right;
	private ImageView image_title_left;
	private Button button_again;
	private Button button_pop_detail;
	private Button button_location;
	private ProgressBar progress_bar;
	private ArrayList<HashMap<String, Object>> orderArrayList;
	private SimpleAdapter spOrder;
	private Drawable mark_green;
	private int index; // 选择的工单索引
	private boolean locState = false;
	private boolean isOK = false; // 数据是否准备好
	private int state = STATE_LIST;
	private List<SetupTask> setupTasks;
	private SharedPreferences timeStampShared;
	private final static String TAG = "OrderFragment";
	private final static int STATE_LIST = 0;
	private final static int STATE_MAP = 1;

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		/**
		 * 使用地图sdk前需先初始化BMapManager. BMapManager是全局的，可为多个MapView共用，它需要地图模块创建前创建，
		 * 并在地图地图模块销毁后销毁，只要还有地图模块在使用，BMapManager就不应该销毁
		 */
		app = (MyApplication) getActivity().getApplication();
		if (app.mBMapManager == null) {
			app.mBMapManager = new BMapManager(getActivity()
					.getApplicationContext());
			/**
			 * 如果BMapManager没有初始化则初始化BMapManager
			 */
			app.mBMapManager.init(MyApplication.strKey,
					new MyApplication.MyGeneralListener());
		}
		// 注意：请在试用setContentView前初始化BMapManager对象，否则会报错
		View view = inflater.inflate(R.layout.fragment_order, container, false);
		return view;
	}

	@Override
	public void onActivityCreated(Bundle savedInstanceState) {
		super.onActivityCreated(savedInstanceState);
		handler.postDelayed(ifOverTime, 5000);
		NetEngine.getTimeStamp(getTimeStampHandler);
		initResource();
		initMap();
	}

	/*
	 * 初始化除地图模块以外的内容
	 */
	public void initResource() {
		// 初始化资源
		timeStampShared = app.getSharedPreferences("time_stamp", 0);
		layout_map = (RelativeLayout) getActivity()
				.findViewById(R.id.order_map);
		layout_pop_view = (RelativeLayout) getActivity().findViewById(
				R.id.layout_pop_view);
		list_order = (ListView) getActivity().findViewById(R.id.list_order);
		image_no_wifi = (ImageView) getActivity().findViewById(
				R.id.image_no_wifi);
		image_title_right = (ImageView) getActivity().findViewById(
				R.id.image_title_right);
		image_title_left = (ImageView) getActivity().findViewById(
				R.id.image_title_left);
		tv_bad_internet = (TextView) getActivity().findViewById(
				R.id.tv_bad_internet);
		tv_bad_internet1 = (TextView) getActivity().findViewById(
				R.id.tv_bad_internet1);
		tv_pop_name = (TextView) getActivity().findViewById(R.id.tv_pop_name);
		tv_pop_address = (TextView) getActivity().findViewById(
				R.id.tv_pop_address);
		tv_pop_box_num = (TextView) getActivity().findViewById(
				R.id.tv_pop_box_num);
		tv_pop_credits = (TextView) getActivity().findViewById(
				R.id.tv_pop_credits);
		button_again = (Button) getActivity().findViewById(R.id.button_again);
		button_pop_detail = (Button) getActivity().findViewById(
				R.id.button_pop_detail);
		button_location = (Button) getActivity().findViewById(
				R.id.button_location);
		progress_bar = (ProgressBar) getActivity().findViewById(
				R.id.progress_bar);
		initAnimation();
		orderArrayList = new ArrayList<HashMap<String, Object>>();
		spOrder = new SimpleAdapter(getActivity(), orderArrayList,
				R.layout.item_order, new String[] { "client", "address", "box",
						"credits", "distance", "new" }, new int[] {
						R.id.tv_client, R.id.tv_address, R.id.tv_box,
						R.id.tv_credits, R.id.tv_distance, R.id.image_new });
		list_order.setAdapter(spOrder);
		list_order.setOnItemClickListener(new OnItemClickListener() {

			@Override
			public void onItemClick(AdapterView<?> ViewGoup, View view,
					int position, long id) {
				// TODO Auto-generated method stub
				Intent intent = new Intent(getActivity(),
						TaskDetailActivity.class);
				intent.putExtra("task_id",
						(String)orderArrayList.get(position).get("id"));
				startActivity(intent);
			}
		});
		image_title_right.setOnClickListener(new OnClickListener() {
			// 标题栏右侧按钮
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				if (isOK == true) {
					tv_bad_internet.setVisibility(View.GONE);
					button_again.setVisibility(View.GONE);
					image_title_right.setVisibility(View.GONE);
					layout_map.setVisibility(View.VISIBLE);
					image_title_left.setVisibility(View.VISIBLE);
					state = STATE_MAP;
				} else
					Toast.makeText(getActivity(), "请检查网络", Toast.LENGTH_SHORT)
							.show();
			}
		});
		image_title_left.setOnClickListener(new OnClickListener() {
			// 标题栏左侧按钮
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				image_title_right.setVisibility(View.VISIBLE);
				layout_map.setVisibility(View.GONE);
				layout_pop_view.setVisibility(View.GONE);
				image_title_left.setVisibility(View.GONE);
				state = STATE_LIST;
			}
		});
		button_location.setOnClickListener(new OnClickListener() {
			// 点击我的位置按钮，地图中心移动到该点
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				mMapController.animateTo(new GeoPoint(
						(int) (locData.latitude * 1e6),
						(int) (locData.longitude * 1e6)));
			}
		});
		button_again.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				handler.postDelayed(ifOverTime, 5000);
				progress_bar.setVisibility(View.VISIBLE);
				tv_bad_internet.setVisibility(View.GONE);
				tv_bad_internet1.setVisibility(View.GONE);				
				button_again.setVisibility(View.GONE);
				image_no_wifi.setVisibility(View.GONE);
				NetEngine.getTimeStamp(getTimeStampHandler);
			}
		});
		button_pop_detail.setOnClickListener(new OnClickListener() {
			// 地图模式中，点击弹出窗口的详情按钮，跳转到工单详情页面
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				Intent intent = new Intent(getActivity(),
						TaskDetailActivity.class);
				intent.putExtra("task_id", setupTasks.get(index).getTask_id());
				startActivity(intent);
			}
		});
		IntentFilter intentFilter = new IntentFilter(
				"com.ebupt.orderreceiver.order");
		getActivity().registerReceiver(myReceiver, intentFilter);
	}

	public void initMap() {

		mMapView = (MapView) getActivity().findViewById(R.id.bmapsView);
		mMapController = mMapView.getController();
		// 得到mMapView的控制权,可以用它控制和驱动平移和缩放
		GeoPoint point = new GeoPoint((int) (39.915 * 1E6),
				(int) (116.404 * 1E6));
		// 用给定的经纬度构造一个GeoPoint，单位是微度 (度 * 1E6)
		mMapController.setCenter(point);// 设置地图中心点
		mMapController.setZoom(12);// 设置地图zoom级别
		mLocationClient = new LocationClient(getActivity()
				.getApplicationContext()); // 声明LocationClient类
		mLocationClient.registerLocationListener(myListener); // 注册监听函数
		LocationClientOption option = new LocationClientOption();
		option.setLocationMode(LocationMode.Hight_Accuracy);// 设置定位模式
		option.setCoorType("bd09ll");// 返回的定位结果是百度经纬度，默认值gcj02
		option.setScanSpan(10000);// 设置发起定位请求的间隔时间为10s
		option.setIsNeedAddress(true);// 返回的定位结果包含地址信息
		option.setNeedDeviceDirect(true);// 返回的定位结果包含手机机头的方向
		mLocationClient.setLocOption(option);
		locData = new LocationData();
		myLocationOverlay = new MyLocationOverlay(mMapView);
		mMapView.getOverlays().add(myLocationOverlay);
		mark_green = getResources().getDrawable(R.drawable.tag_task_green);
		// 创建IteminizedOverlay
		itemOverlay = new MapWorkOrderPop(mark_green, mMapView, this);
		// 将IteminizedOverlay添加到MapView中
		mMapView.getOverlays().add(itemOverlay);
	}

	public void initAnimation() {
		// 初始化动画
		animationBottomUp = new TranslateAnimation(Animation.RELATIVE_TO_SELF,
				0, Animation.RELATIVE_TO_SELF, 0, Animation.RELATIVE_TO_SELF,
				1, Animation.RELATIVE_TO_SELF, 0);
		animationBottomUp.setDuration(300);
	}

	public void showPopView(int position) {
		// 在地图上点击按钮弹出窗口
		this.index = Integer.parseInt(itemOverlay.getItem(position).getTitle());
		mMapController.animateTo(new GeoPoint(setupTasks.get(index)
				.getTask_client_lat(), setupTasks.get(index)
				.getTask_client_lng()));
		tv_pop_name.setText(setupTasks.get(index).getTask_client_name());
		tv_pop_address.setText("地址："
				+ setupTasks.get(index).getTask_client_address());
		tv_pop_box_num.setText("盒子(" + setupTasks.get(index).getTask_box_num()
				+ ")");
		tv_pop_credits.setText("积分("
				+ (setupTasks.get(index).getTask_grab_credits() + setupTasks
						.get(index).getTask_finish_credits()) + ")");
		layout_pop_view.startAnimation(animationBottomUp);
		layout_pop_view.setVisibility(View.VISIBLE);
	}

	public void updateListData() {
		setupTasks = app.getSetupTasks();
		orderArrayList.clear();
		for (int i = 0; i < setupTasks.size(); i++) {
			if (setupTasks.get(i).getTask_status().equals("00")) {
				HashMap<String, Object> list = new HashMap<String, Object>();
				list.put("id", setupTasks.get(i).getTask_id());
				list.put("client", setupTasks.get(i).getTask_client_name());
				list.put("address", setupTasks.get(i).getTask_client_address());
				list.put("mobile", setupTasks.get(i).getTask_client_mobile());
				list.put("index", i + "");
				double distance;
				if (setupTasks.get(i).getTask_client_lat() == 0
						|| setupTasks.get(i).getTask_client_lng() == 0
						|| locState == false)
					list.put("distance", "未知");
				else {
					distance = DistanceUtil.getDistance(new GeoPoint(
							(int) (locData.latitude * 1e6),
							(int) (locData.longitude * 1e6)), new GeoPoint(
							setupTasks.get(i).getTask_client_lat(), setupTasks
									.get(i).getTask_client_lng()));
					// 保留两位小树
					list.put(
							"distance",
							(double) Math
									.round((double) (distance / 1000 * 100))
									/ 100 + " km");
				}
				Calendar calendar1=Calendar.getInstance();  
			    calendar1.setTimeInMillis(setupTasks.get(i).getTask_publish_time() * 1000); 
				Calendar calendar2=Calendar.getInstance();  
			    calendar2.setTimeInMillis(System.currentTimeMillis()); 
			    if (calendar1.get(Calendar.HOUR_OF_DAY) == calendar2.get(Calendar.HOUR_OF_DAY))
				{
					list.put("new", R.drawable.tag_new);
				}
				else
				{
					list.put("new", "");
				}
				list.put("box", "盒子(" + setupTasks.get(i).getTask_box_num()
							+ ") ");
				list.put(
						"credits",
						"积分("
								+ (setupTasks.get(i).getTask_grab_credits() + setupTasks
										.get(i).getTask_finish_credits()) + ")");
				orderArrayList.add(list);
			}
		}
		spOrder.notifyDataSetChanged();
	}

	public void updateMapData() {
		itemOverlay.removeAll();
		for (int i = 0; i < setupTasks.size(); i++) {
			if (setupTasks.get(i).getTask_status().equals("00")) {
				GeoPoint point1 = new GeoPoint(setupTasks.get(i)
						.getTask_client_lat(), setupTasks.get(i)
						.getTask_client_lng());
				OverlayItem item = new OverlayItem(point1, i + "", "item");
				itemOverlay.addItem(item);
			}
		}
		mMapView.refresh();
	}

	// 返回键逻辑
	public boolean excuteBack() {
		if (state == STATE_MAP) {
			image_title_right.setVisibility(View.VISIBLE);
			layout_map.setVisibility(View.GONE);
			layout_pop_view.setVisibility(View.GONE);
			image_title_left.setVisibility(View.GONE);
			state = STATE_LIST;
			return true;
		}
		return false;
	}

	JsonHttpResponseHandler getTimeStampHandler = new JsonHttpResponseHandler() {

		@Override
		public void onSuccess(JSONObject result) {
			try {
				// 对比本地时间戳，如果过期则向服务器请求数据
				TimeStamp timeStamp = new TimeStamp();
				if (result.getBoolean("success") == true)
					timeStamp = JsonParser.parseTimeSamp(result
							.getString("data"));
				if (timeStamp.getWOTimeStamp() > timeStampShared.getLong(
						"WOTimeStamp", 0)
						|| timeStamp.getTSTimeStamp() > timeStampShared
								.getLong("TSTimeStamp", 0)) {
					NetEngine.getAllData(getAllDataHandler,
							MyApplication.getInstance().userName,
							MyApplication.getInstance().password);
				} else {
					updateListData();
					updateMapData();
					list_order.setVisibility(View.VISIBLE);
					progress_bar.setVisibility(View.GONE);
				}
				isOK = true;
				mLocationClient.start();
				if (mLocationClient != null && mLocationClient.isStarted())
					mLocationClient.requestLocation();
				else
					Log.d("Location", "locClient is null or not started");
			} catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		@Override
		public void onFailure(Throwable error) {
			if(!list_order.isShown())
			{
				tv_bad_internet.setVisibility(View.VISIBLE);
				tv_bad_internet1.setVisibility(View.VISIBLE);
				image_no_wifi.setVisibility(View.VISIBLE);
				button_again.setVisibility(View.VISIBLE);
				progress_bar.setVisibility(View.GONE);
			}
		}
	};

	JsonHttpResponseHandler getAllDataHandler = new JsonHttpResponseHandler() {
		@Override
		public void onSuccess(JSONObject result) {
			try {
				if (result.getBoolean("success") == true) {// 将获取的用户信息存储数据库，并广播通知UI刷新
					JSONObject data = new JSONObject(result.getString("data"));
					timeStampShared
							.edit()
							.putLong("WOTimeStamp", data.getLong("WOTimeStamp"))
							.commit();
					List<SetupTask> setupTasks = JsonParser.parseSetupTask(data
							.getString("WorkOrderList"));
					DbUtil.deleteOrderWithNoUser();
					DbUtil.addSetupTask(setupTasks);

					timeStampShared
							.edit()
							.putLong("TSTimeStamp", data.getLong("TSTimeStamp"))
							.commit();
					List<AppSetupUser> appSetupUsers = JsonParser
							.parseAppSetupUser(data.getString("TaskReceiver"));
					DbUtil.addAppSetupUser(appSetupUsers);
					app.uploadData();
					updateListData();
					updateMapData();
					list_order.setVisibility(View.VISIBLE);
					progress_bar.setVisibility(View.GONE);
				} else {
					Log.e(TAG, "获取数据失败，" + result.getString("info"));
				}
			} catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		@Override
		public void onFailure(Throwable error) {
			if(!list_order.isShown())
			{
				tv_bad_internet.setVisibility(View.VISIBLE);
				tv_bad_internet1.setVisibility(View.VISIBLE);
				image_no_wifi.setVisibility(View.VISIBLE);
				button_again.setVisibility(View.VISIBLE);
				progress_bar.setVisibility(View.GONE);
			}
		}
	};

	Handler handler = new Handler();
	Runnable ifOverTime = new Runnable() {

		@Override
		public void run() {
			// TODO Auto-generated method stub
			if (!list_order.isShown()) {
				tv_bad_internet.setVisibility(View.VISIBLE);
				tv_bad_internet1.setVisibility(View.VISIBLE);
				image_no_wifi.setVisibility(View.VISIBLE);
				button_again.setVisibility(View.VISIBLE);
				progress_bar.setVisibility(View.GONE);
			}
			handler.removeCallbacks(ifOverTime);
		}
	};

	BroadcastReceiver myReceiver = new BroadcastReceiver() {
		// 由service告诉OrderFragment需要更新数据了
		@Override
		public void onReceive(Context context, Intent intent) {
			// TODO Auto-generated method stub
			if (intent.getAction().equals("com.ebupt.orderreceiver.order")) {
				updateMapData();
				updateListData();
			}
		}
	};

	BDLocationListener myListener = new BDLocationListener() {
		// 定位相关
		@Override
		public void onReceiveLocation(BDLocation location) {
			// TODO Auto-generated method stub
			if (location == null || location.getLatitude() == 4.9E-324
					|| location.getLongitude() == 4.9E-324) {
				return;
			}
			locData.latitude = location.getLatitude();
			locData.longitude = location.getLongitude();
			locData.direction = location.getDirection();
			locState = true;
			myLocationOverlay.setData(locData);
			mMapView.refresh();
			if (isFirstLoc == true) {
				mMapController.animateTo(new GeoPoint(
						(int) (locData.latitude * 1e6),
						(int) (locData.longitude * 1e6)));
				isFirstLoc = false;
			}
			updateListData();
			updateMapData();
		}

		@Override
		public void onReceivePoi(BDLocation arg0) {
			// TODO Auto-generated method stub

		}
	};

	@Override
	public void onDestroy() {
		mMapView.destroy();
		mLocationClient.stop();
		getActivity().unregisterReceiver(myReceiver);
		super.onDestroy();
	}

	@Override
	public void onPause() {
		mMapView.onPause();
		app.isOrderFragmentShown = false;
		super.onPause();
	}

	@Override
	public void onResume() {
		mMapView.onResume();
		app.isOrderFragmentShown = true;
		super.onResume();
	}
}