package com.ebupt.yuebox.fragment;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import org.json.JSONException;
import org.json.JSONObject;

import android.app.AlertDialog;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.animation.Animation;
import android.view.animation.TranslateAnimation;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.RadioGroup;
import android.widget.RelativeLayout;
import android.widget.SimpleAdapter;
import android.widget.TextView;
import android.widget.Toast;

import com.baidu.location.BDLocation;
import com.baidu.location.BDLocationListener;
import com.baidu.location.LocationClient;
import com.baidu.location.LocationClientOption;
import com.baidu.location.LocationClientOption.LocationMode;
import com.baidu.mapapi.BMapManager;
import com.baidu.mapapi.map.LocationData;
import com.baidu.mapapi.map.MapController;
import com.baidu.mapapi.map.MapView;
import com.baidu.mapapi.map.MyLocationOverlay;
import com.baidu.mapapi.map.OverlayItem;
import com.baidu.mapapi.utils.DistanceUtil;
import com.baidu.platform.comapi.basestruct.GeoPoint;
import com.ebupt.yuebox.R;
import com.ebupt.yuebox.application.MyApplication;
import com.ebupt.yuebox.database.AppSetupUserDao.Properties;
import com.ebupt.yuebox.database.DbUtil;
import com.ebupt.yuebox.model.AppSetupUser;
import com.ebupt.yuebox.model.MapWorkOrderPop;
import com.ebupt.yuebox.model.SetupTask;
import com.ebupt.yuebox.net.NetEngine;
import com.ebupt.yuebox.service.MyService;
import com.loopj.android.http.JsonHttpResponseHandler;

/**
 * 
 * @ClassName: MapFragment
 * @Description: 地图模式
 * @author ZhouZheChen
 * @date 2014-3-6
 * 
 */
public class OrderFragment extends Fragment{

	private MyApplication app;
	private MapView mMapView = null;
//	private MKSearch mMKSearch = null;
	private LocationClient mLocationClient = null;
	private LocationData locData;
	private MyLocationOverlay myLocationOverlay;
	private MapWorkOrderPop itemOverlay;
//	private RouteOverlay routeOverlay;
//	private TransitOverlay transitOverlay;
	private MapController mMapController;
	private boolean isFirstLoc = true;
	private Animation animationBottomUp;
	private Animation animationBottomDown;
	private Animation animationToRight;
	private Animation animationFromLeft;
	private Animation animationFromRight;
	private Animation animationToLeft;
	private TextView tv_pop_address;
	private TextView tv_pop_mobile;
	private TextView tv_detail_name;
	private TextView tv_detail_address;
	private TextView tv_detail_mobile;	
	private TextView tv_status_green;
	private ListView list_order;
//	private ListView list_detail_route;
	private ListView list_task_detail;
//	private ListView list_routes;
//	private FastScrollView layout_list;
	private RelativeLayout layout_map;
	private RelativeLayout layout_pop_view;
//	private RelativeLayout layout_search;
//	private RelativeLayout layout_search_result;
	private RelativeLayout layout_title;
	private RelativeLayout layout_task_detail;
//	private RelativeLayout layout_address;
	private RelativeLayout layout_mobile;
	private FrameLayout layout_status;
	private RadioGroup radio_tab;
//	private RadioGroup radio_way;
	private ImageView image_title_right;
	private ImageView image_title_left;
	private ImageView image_status_green;
//	private ImageView image_route_right;
//	private ImageView image_route_left;
//	private ImageView image_cancel;
//	private EditText edit_start;
//	private EditText edit_end;
//	private Button button_search;
	private Button button_pop_detail;
	private Button button_location;
	private Button button_online;
    private ArrayList<HashMap<String, String>> orderArrayList;
//	private ArrayList<HashMap<String, String>> routeDetailArrayList;
//	private ArrayList<HashMap<String, String>> routesArrayList;
	private ArrayList<HashMap<String, String>> taskDetailArrayList;	
	private SimpleAdapter spOrder;
//	private SimpleAdapter spRouteDetail;
//	private SimpleAdapter spRoutes;
	private SimpleAdapter spTaskDetail;
	private Drawable mark_red;
	private Drawable mark_green;
//	protected ProgressDialog searchDialog;
//	private searchAsyncTask searchAsyncTask;
	private int index;  //选择的工单索引
//	private String which = "start"; //默认先搜索起点的坐标
//	private MKAddrInfo start;
//	private MKAddrInfo end;
	private String address;   //我的位置的详细地址
	private String city;
	private boolean locState = false;
	private int state = STATE_LIST;
//	private int stateBeforeSearch;
	private int stateBeforeDetail;
	private Intent intent;
	private List<SetupTask> setupTasks;
	private List<SetupTask> lastSetupTasks;
//	private SectionOrderListView list_order; 
//	private SectionOrderAdapter orderAdapter;
//	private List<SetupTask> orderNoFinishList;
//	private List<SetupTask> orderNoGrabList;
//	private ArrayList<Pair<String, List<SetupTask>>> setupTaskLists;
	private final static String TAG = "OrderFragment";
	private final static int STATE_LIST = 0;   
	private final static int STATE_MAP = 1;
//	private final static int STATE_SEARCH = 2;  //搜索界面,若搜索公交则显示不同路线，点击对应路线进去列表显示路线
//	private final static int STATE_SEARCH_MAP = 3;	//搜索结果 地图显示路线
//	private final static int STATE_SEARCH_LIST = 4;	//搜多结果 列表显示路线
	private final static int STATE_TASK_DETAIL = 5;	//显示工单详情
	
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container,
			Bundle savedInstanceState) {
		/**
         * 使用地图sdk前需先初始化BMapManager.
         * BMapManager是全局的，可为多个MapView共用，它需要地图模块创建前创建，
         * 并在地图地图模块销毁后销毁，只要还有地图模块在使用，BMapManager就不应该销毁
         */
		app = (MyApplication)getActivity().getApplication();
        if (app.mBMapManager == null) {
            app.mBMapManager = new BMapManager(getActivity().getApplicationContext());
            /**
             * 如果BMapManager没有初始化则初始化BMapManager
             */
            app.mBMapManager.init(MyApplication.strKey,new MyApplication.MyGeneralListener());
        }
		//注意：请在试用setContentView前初始化BMapManager对象，否则会报错
		View view = inflater.inflate(R.layout.fragment_order, container, false);		
		return view;
	}

	@Override
	public void onActivityCreated(Bundle savedInstanceState) {
		super.onActivityCreated(savedInstanceState);
		initResource();
		initMap();
		updateListData();
		updateMapData();
	}
	
	/*
	 * 初始化除地图模块以外的内容
	 */
	public void initResource()
	{
		//初始化资源
//		layout_list = (FastScrollView) getActivity().findViewById(R.id.layout_list);
		layout_map = (RelativeLayout) getActivity().findViewById(R.id.order_map);
//		layout_search = (RelativeLayout) getActivity().findViewById(R.id.layout_search);
//		layout_search_result = (RelativeLayout) getActivity().findViewById(R.id.layout_route_detail);
		layout_title = (RelativeLayout) getActivity().findViewById(R.id.layout_title);
		layout_task_detail = (RelativeLayout) getActivity().findViewById(R.id.layout_task_detail);
//		layout_address = (RelativeLayout) getActivity().findViewById(R.id.layout_address);
		layout_mobile = (RelativeLayout) getActivity().findViewById(R.id.layout_mobile);
		layout_status = (FrameLayout) getActivity().findViewById(R.id.layout_status);
		layout_pop_view= (RelativeLayout)getActivity().findViewById(R.id.layout_pop_view);
		list_order = (ListView) getActivity().findViewById(R.id.list_order);
//		list_detail_route = (ListView) getActivity().findViewById(R.id.list_detail_route);
		list_task_detail = (ListView) getActivity().findViewById(R.id.list_task_detail);
//		list_routes = (ListView) getActivity().findViewById(R.id.list_search_route);
		radio_tab = (RadioGroup) getActivity().findViewById(R.id.radio_tab);
//		radio_way = (RadioGroup) getActivity().findViewById(R.id.radio_way);
		image_title_right = (ImageView) getActivity().findViewById(R.id.image_title_right);
		image_title_left = (ImageView) getActivity().findViewById(R.id.image_title_left);
		image_status_green = (ImageView) getActivity().findViewById(R.id.image_status_green);
//		image_route_right = (ImageView) getActivity().findViewById(R.id.image_route_right);
//		image_route_left = (ImageView) getActivity().findViewById(R.id.image_route_left);
//		image_cancel = (ImageView) getActivity().findViewById(R.id.image_cancel);
//		edit_start = (EditText) getActivity().findViewById(R.id.edit_start);
//		edit_end = (EditText) getActivity().findViewById(R.id.edit_end);
		tv_pop_address = (TextView)getActivity().findViewById(R.id.tv_pop_address);
        tv_pop_mobile = (TextView)getActivity().findViewById(R.id.tv_pop_mobile);
        tv_detail_name = (TextView)getActivity().findViewById(R.id.tv_detail_name);
        tv_detail_address = (TextView)getActivity().findViewById(R.id.tv_detail_address);
        tv_detail_mobile = (TextView)getActivity().findViewById(R.id.tv_detail_mobile);
        tv_status_green = (TextView)getActivity().findViewById(R.id.tv_status_green);
//        button_search = (Button) getActivity().findViewById(R.id.button_search);
        button_pop_detail = (Button)getActivity().findViewById(R.id.button_pop_detail);
		button_location = (Button) getActivity().findViewById(R.id.button_location);
        button_online = (Button)getActivity().findViewById(R.id.button_online);
		button_online.setBackgroundResource(R.drawable.button_offline);
		initAnimation();
        orderArrayList = new ArrayList<HashMap<String,String>>();
		spOrder = new SimpleAdapter(getActivity(), orderArrayList, R.layout.item_order, 
							   new String[]{"client", "address", "box_credits", "distance", "new"}, 
							   new int[]{R.id.tv_client, R.id.tv_address, R.id.tv_box_credits, R.id.tv_distance, R.id.tv_new});		
//        routeDetailArrayList = new ArrayList<HashMap<String,String>>();
//		spRouteDetail = new SimpleAdapter(getActivity(), routeDetailArrayList, R.layout.item_route_detail, 
//							   new String[]{"content", "distance", "time"}, 
//							   new int[]{R.id.tv_content, R.id.tv_distance, R.id.tv_time});		
//		routesArrayList = new ArrayList<HashMap<String,String>>();
//		spRoutes = new SimpleAdapter(getActivity(), routesArrayList, R.layout.item_routes, 
//								   new String[]{"content", "distance", "time"}, 
//								   new int[]{R.id.tv_routes, R.id.tv_distance, R.id.tv_time});
       	taskDetailArrayList = new ArrayList<HashMap<String,String>>();
		spTaskDetail = new SimpleAdapter(getActivity(), taskDetailArrayList, R.layout.item_task_detail, 
								   new String[]{"item", "content"}, 
								   new int[]{R.id.tv_task_detail_item, R.id.tv_task_detail_content});
		list_order.setAdapter(spOrder);
//		list_detail_route.setAdapter(spRouteDetail);
//		list_routes.setAdapter(spRoutes);
		list_task_detail.setAdapter(spTaskDetail);
//		newIndex = new ArrayList<Integer>();
//		orderNoFinishList = new ArrayList<SetupTask>();
//		orderNoGrabList = new ArrayList<SetupTask>();
//		setupTaskLists = new ArrayList<Pair<String,List<SetupTask>>>();	
//		list_order = (SectionOrderListView) getActivity().findViewById(R.id.list_order);
//		list_order.setPinnedHeaderView(LayoutInflater.from(getActivity()).inflate(R.layout.item_my_order_header, list_order, false));
//		list_order.setAdapter(orderAdapter = new SectionOrderAdapter(setupTaskLists));
//		list_order.setOnItemClickListener(new OnItemClickListener() {
//
//			@Override
//			public void onItemClick(AdapterView<?> ViewGoup, View view, int position,
//					long id) {
//				// TODO Auto-generated method stub
//		    	index = position;
//				tv_detail_name.setText(setupTasks.get(index).getTask_client_name());
//		    	tv_detail_address.setText(setupTasks.get(index).getTask_client_address());
//		    	StringBuilder sb = new StringBuilder();
//		    	if(setupTasks.get(index).getTask_client_person() == null || 
//		    	   setupTasks.get(index).getTask_client_person().equals("") ||
//		    	   setupTasks.get(index).getTask_client_person().equals("null"))
//		    		sb.append(setupTasks.get(index).getTask_client_mobile());
//		    	else
//		    		sb.append(setupTasks.get(index).getTask_client_person()+"："+setupTasks.get(index).getTask_client_mobile());
//		    	if((setupTasks.get(index).getTask_client_tel() == null || 
//		    	   setupTasks.get(index).getTask_client_tel().equals("") || 
//		    	   setupTasks.get(index).getTask_client_tel().equals("null")) == false)
//		    		sb.append("、"+setupTasks.get(index).getTask_client_tel());
//		    	tv_detail_mobile.setText(sb.toString());
//		    	stateBeforeDetail = state;
//				state = STATE_TASK_DETAIL;
//				if(setupTasks.get(index).getTask_status().equals("00"))
//					tv_status_green.setText("我的");
//				else if(setupTasks.get(index).getTask_status().equals("01"))
//					tv_status_green.setText("抢");
//				taskDetailArrayList.clear();
//				HashMap<String,String> list;				
//				list = new HashMap<String, String>();		
//				list.put("item", "发布时间：");
//				list.put("content", new Date(setupTasks.get(index).getTask_publish_time()).toLocaleString());
//				taskDetailArrayList.add(list);
//				
//				list = new HashMap<String, String>();		
//				list.put("item", "截止时间：");
//				list.put("content", new Date(setupTasks.get(index).getTask_end_time()).toLocaleString());
//				taskDetailArrayList.add(list);
//				
//				if(setupTasks.get(index).getTask_box_num() != null)
//				{
//					list = new HashMap<String, String>();		
//					list.put("item", "盒子数量：");
//					list.put("content", setupTasks.get(index).getTask_box_num().intValue()+"个");
//					taskDetailArrayList.add(list);
//				}	
//				spTaskDetail.notifyDataSetChanged();
//				radio_tab.startAnimation(animationBottomDown);
//				layout_task_detail.startAnimation(animationFromRight);
//				layout_title.setVisibility(View.GONE);
//				layout_list.setVisibility(View.GONE);
//				radio_tab.setVisibility(View.GONE);
//				image_title_right.setVisibility(View.GONE);
//				layout_task_detail.setVisibility(View.VISIBLE);
//			}
//		});
		image_title_right.setOnClickListener(new OnClickListener() {
			//标题栏右侧按钮
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				if(state == STATE_LIST)
				{
//					layout_list.setVisibility(View.GONE);
					image_title_right.setVisibility(View.GONE);
					layout_map.setVisibility(View.VISIBLE);
					image_title_left.setVisibility(View.VISIBLE);	
					state = STATE_MAP;
				}		
			}
		});
		image_title_left.setOnClickListener(new OnClickListener() {
			//标题栏左侧按钮
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
//				if(state == STATE_SEARCH_MAP)
//				{
//					radio_tab.startAnimation(animationBottomDown);
//					layout_map.setVisibility(View.GONE);
//					layout_title.setVisibility(View.GONE);
//					radio_tab.setVisibility(View.GONE);
//					layout_search_result.setVisibility(View.VISIBLE);
//					state = STATE_SEARCH_LIST;
//				}
//				else if(state == STATE_MAP)
//				{
				image_title_right.setVisibility(View.VISIBLE);
//					layout_list.setVisibility(View.VISIBLE);
				layout_map.setVisibility(View.GONE);
				layout_pop_view.setVisibility(View.GONE);
				image_title_left.setVisibility(View.GONE);
				state = STATE_LIST;
//				}
			}
		});
//		image_route_right.setOnClickListener(new OnClickListener(){
//			
//			@Override
//			public void onClick(View v) {
//				// TODO Auto-generated method stub
//				radio_tab.startAnimation(animationBottomUp);
//				layout_map.setVisibility(View.VISIBLE);
//				radio_tab.setVisibility(View.VISIBLE);
//				layout_title.setVisibility(View.VISIBLE);
//				image_title_left.setVisibility(View.VISIBLE);
//				layout_search_result.setVisibility(View.GONE);
//				layout_pop_view.setVisibility(View.GONE);
//			    handler.postDelayed(zoomMap, 1000);
//				state = STATE_SEARCH_MAP;
//			}
//		});
//		image_route_left.setOnClickListener(new OnClickListener() {
//			
//			@Override
//			public void onClick(View v) {
//				// TODO Auto-generated method stub
//				layout_search.startAnimation(animationFromLeft);
//				layout_search_result.startAnimation(animationToRight);
//				layout_search_result.setVisibility(View.GONE);
//				layout_search.setVisibility(View.VISIBLE);
//		        routeDetailArrayList.clear();
//			    if(mMapView.getOverlays().contains(routeOverlay))
//			    {
//				    mMapView.getOverlays().add(itemOverlay);
//				    mMapView.getOverlays().remove(routeOverlay);
//			    }
//			    if(mMapView.getOverlays().contains(transitOverlay))
//			    {
//				    mMapView.getOverlays().add(itemOverlay);
//				    mMapView.getOverlays().remove(transitOverlay);
//			    }
//				state = STATE_SEARCH;
//			}
//		});
//		image_cancel.setOnClickListener(new OnClickListener() {
//			//退出导航界面
//			@Override
//			public void onClick(View v) {
//				// TODO Auto-generated method stub
//		        routeDetailArrayList.clear();
//			    if(mMapView.getOverlays().contains(routeOverlay))
//			    {
//				    mMapView.getOverlays().add(itemOverlay);
//				    mMapView.getOverlays().remove(routeOverlay);
//			    }
//			    if(mMapView.getOverlays().contains(transitOverlay))
//			    {
//				    mMapView.getOverlays().add(itemOverlay);
//				    mMapView.getOverlays().remove(transitOverlay);
//			    }
//				state = stateBeforeSearch;
//				if(state == STATE_LIST)
//				{
//					radio_tab.startAnimation(animationBottomUp);
//					layout_list.setVisibility(View.VISIBLE);
//					image_title_right.setVisibility(View.VISIBLE);
//					layout_title.setVisibility(View.VISIBLE);
//					radio_tab.setVisibility(View.VISIBLE);
//					image_title_left.setVisibility(View.GONE);
//					layout_search.setVisibility(View.GONE);
//				}
//				else if(state == STATE_MAP)
//				{
//					radio_tab.startAnimation(animationBottomUp);
//					image_title_left.setVisibility(View.VISIBLE);
//					layout_map.setVisibility(View.VISIBLE);
//					layout_title.setVisibility(View.VISIBLE);
//					radio_tab.setVisibility(View.VISIBLE);
//					layout_search.setVisibility(View.GONE);
//					image_title_right.setVisibility(View.GONE);
//				}
//				else if(state == STATE_TASK_DETAIL)
//				{
//					layout_search.startAnimation(animationToRight);
//					layout_task_detail.startAnimation(animationFromLeft);
//					layout_task_detail.setVisibility(View.VISIBLE);
//					layout_search.setVisibility(View.GONE);
//				}
//				InputMethodManager imm = (InputMethodManager) getActivity().getSystemService(Context.INPUT_METHOD_SERVICE);  
//				imm.hideSoftInputFromWindow(layout_search.getWindowToken(), 0);
//			}
//		});
		image_status_green.setOnClickListener(new OnClickListener() {
			//在工单详情页面中，点击绿色抢单按钮
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				NetEngine.grabWorkOrder(grabWorkOrderHandler, app.userName, app.password, setupTasks.get(index).getTask_id());
			}
		});
		button_location.setOnClickListener(new OnClickListener() {
			//点击我的位置按钮，地图中心移动到该点
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				  mMapController.animateTo(new GeoPoint((int)(locData.latitude*1e6),
						  (int)(locData.longitude* 1e6)));
			}
		});
		button_online.setOnClickListener(new OnClickListener() {
			//点击在线/离线按钮更在状态
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				if(app.isOnline == false)
				{
					NetEngine.modifyUserStatus(modifyUserStatusOnHandler, app.userName, app.password, "010");
				}
				else if(app.isOnline == true)
				{
					NetEngine.modifyUserStatus(modifyUserStatusOffHandler, app.userName, app.password, "011");
				}
			}
		});
//		button_search.setOnClickListener(new OnClickListener() {
//			//搜索不同的出行方式
//			@Override
//			public void onClick(View v) {
//				// TODO Auto-generated method stub
//		        routesArrayList.clear();
//		        start = null;
//		        end = null;
//				which = "start";
//				if(edit_start.getText().toString().equals("我的位置"))
//					mMKSearch.geocode(address, city);   //地址解析
//				else
//					mMKSearch.geocode(edit_start.getText().toString(), city);   //地址解析
//				searchDialog = new ProgressDialog(getActivity());        
//				searchDialog.setMessage("正在搜索中，请稍后");    
//				searchDialog.setCancelable(true); 
//				searchDialog.show();
//				searchAsyncTask = new searchAsyncTask();
//				searchAsyncTask.execute();   //查询起点与终点的坐标
//			}
//		});
//		tv_pop_address.setOnClickListener(new OnClickListener() {
//			//点击地址进入导航视图
//			@Override
//			public void onClick(View v) {
//				// TODO Auto-generated method stub			
//				radio_tab.startAnimation(animationBottomDown);
//				layout_title.setVisibility(View.GONE);
//				layout_map.setVisibility(View.GONE);
//				radio_tab.setVisibility(View.GONE);
//				layout_search.setVisibility(View.VISIBLE);
//				edit_start.setText("我的位置");
//				edit_end.setText(setupTasks.get(index).getTask_client_address());
//				stateBeforeSearch = state;
//				state = STATE_SEARCH;
//			}
//		});
        tv_pop_mobile.setOnClickListener(new OnClickListener() {
			//点击电话号码后，拨打电话
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				Intent intent = new Intent(Intent.ACTION_CALL,Uri.parse("tel:"+setupTasks.get(index).getTask_client_mobile()));  
				startActivity(intent);  
			}
		});
        button_pop_detail.setOnClickListener(new OnClickListener() {
			//地图模式中，点击弹出窗口的详情按钮，跳转到工单详情页面
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				tv_detail_name.setText(setupTasks.get(index).getTask_client_name());
		    	tv_detail_address.setText(setupTasks.get(index).getTask_client_address());
		    	tv_detail_mobile.setText(setupTasks.get(index).getTask_client_mobile());
		    	stateBeforeDetail = state;
				state = STATE_TASK_DETAIL;					
				taskDetailArrayList.clear();
				HashMap<String,String> list;				
				list = new HashMap<String, String>();		
				list.put("item", "发布时间：");
				list.put("content", new Date(setupTasks.get(index).getTask_publish_time()).toLocaleString());
				taskDetailArrayList.add(list);
				
				list = new HashMap<String, String>();		
				list.put("item", "截止时间：");
				list.put("content", new Date(setupTasks.get(index).getTask_end_time()).toLocaleString());
				taskDetailArrayList.add(list);
				
				if(setupTasks.get(index).getTask_box_num() != null)
				{
					list = new HashMap<String, String>();		
					list.put("item", "盒子数量：");
					list.put("content", setupTasks.get(index).getTask_box_num().intValue()+"个");
					taskDetailArrayList.add(list);
				}	
				spTaskDetail.notifyDataSetChanged();
				if(setupTasks.get(index).getTask_status().equals("00")) //可以抢
				{
					tv_status_green.setText("抢");
				}
				else if(setupTasks.get(index).getTask_status().equals("01"))
				{

					tv_status_green.setText("我的");
				}
				radio_tab.startAnimation(animationBottomDown);
				layout_task_detail.startAnimation(animationFromRight);
				layout_title.setVisibility(View.GONE);
				layout_map.setVisibility(View.GONE);
				radio_tab.setVisibility(View.GONE);
				layout_task_detail.setVisibility(View.VISIBLE);
			}
		});
//        layout_order_no_finish.setOnClickListener(new OnClickListener() {
//			
//			@Override
//			public void onClick(View v) {
//				// TODO Auto-generated method stub
//				if(isOrderNoFinishShow == true)
//				{
//					image_order_no_finish_down.setVisibility(View.GONE);
//					list_order_no_finish.setVisibility(View.GONE);
//					image_order_no_finish_right.setVisibility(View.VISIBLE);
//					isOrderNoFinishShow = false;
//				}
//				else
//				{
//					image_order_no_finish_down.setVisibility(View.VISIBLE);
//					list_order_no_finish.setVisibility(View.VISIBLE);
//					image_order_no_finish_right.setVisibility(View.GONE);
//					isOrderNoFinishShow = true;
//				}
//			}
//		});
//        layout_order_no_grab.setOnClickListener(new OnClickListener() {
//			
//			@Override
//			public void onClick(View v) {
//				// TODO Auto-generated method stub
//				if(isOrderNoGrabShow == true)
//				{
//					image_order_no_grab_down.setVisibility(View.GONE);
//					list_order_no_grab.setVisibility(View.GONE);
//					image_order_no_grab_right.setVisibility(View.VISIBLE);
//					isOrderNoGrabShow = false;
//				}
//				else
//				{
//					image_order_no_grab_down.setVisibility(View.VISIBLE);
//					list_order_no_grab.setVisibility(View.VISIBLE);
//					image_order_no_grab_right.setVisibility(View.GONE);
//					isOrderNoGrabShow = true;
//				}			
//			}
//		});
//        layout_address.setOnClickListener(new OnClickListener() {
//			//工单详情中，点击地址栏进入导航界面
//			@Override
//			public void onClick(View v) {
//				// TODO Auto-generated method stub
//				layout_task_detail.startAnimation(animationToLeft);
//				layout_search.startAnimation(animationFromRight);
//				layout_task_detail.setVisibility(View.GONE);				
//				layout_search.setVisibility(View.VISIBLE);
//				edit_start.setText("我的位置");
//				edit_end.setText(setupTasks.get(index).getTask_client_address());
//				stateBeforeSearch = state;
//				state = STATE_SEARCH;
//			}
//		});
        layout_mobile.setOnClickListener(new OnClickListener() {
			//工单详情中，点击电话栏进入拨打电话界面
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
		    	if(setupTasks.get(index).getTask_client_tel() == null || 
				   setupTasks.get(index).getTask_client_tel().equals("") || 
				   setupTasks.get(index).getTask_client_tel().equals("null"))
		    	{
		    		Intent intent = new Intent(Intent.ACTION_CALL,Uri.parse("tel:"+setupTasks.get(index).getTask_client_mobile()));  
		    		startActivity(intent);
		    	}
		    	else
		    	{
					new AlertDialog.Builder(getActivity()).setTitle("请选择要拨打的电话").
							setSingleChoiceItems(new String[] { "手机："+setupTasks.get(index).getTask_client_mobile(), "座机："+setupTasks.get(index).getTask_client_tel()}, 0,
										         new DialogInterface.OnClickListener() {
						     public void onClick(DialogInterface dialog, int which) {
						    	 if(which == 0)
						    	 {
							    		Intent intent = new Intent(Intent.ACTION_CALL,Uri.parse("tel:"+setupTasks.get
							    		(index).getTask_client_mobile()));  
							    		startActivity(intent);
						    	 }
						    	 else
						    	 {
							    		Intent intent = new Intent(Intent.ACTION_CALL,Uri.parse("tel:"+setupTasks.get(index).getTask_client_tel()));  
							    		startActivity(intent);
						    	 }
						    	 dialog.dismiss();
						     }
							}
		    		).setNegativeButton("取消", null).show();
		    	}
			}
		});
        layout_status.setOnClickListener(new OnClickListener() {
			//点击抢单按钮
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				if(image_status_green.isShown())
					Toast.makeText(MyApplication.getInstance().getApplicationContext(), "抢单成功",
							Toast.LENGTH_LONG).show();
			}
		});
		intent=new Intent(getActivity(),MyService.class);
        getActivity().registerReceiver(myReceiver, new IntentFilter("com.ebupt.orderreceiver"));
	}
	
	public void initMap()
	{
		
//		mMKSearch = new MKSearch();
//		mMKSearch.init(app.mBMapManager, this);
		mMapView=(MapView)getActivity().findViewById(R.id.bmapsView);
		mMapController=mMapView.getController();
		// 得到mMapView的控制权,可以用它控制和驱动平移和缩放
		GeoPoint point =new GeoPoint((int)(39.915* 1E6),(int)(116.404* 1E6));
		//用给定的经纬度构造一个GeoPoint，单位是微度 (度 * 1E6)
		mMapController.setCenter(point);//设置地图中心点
		mMapController.setZoom(12);//设置地图zoom级别
		mLocationClient = new LocationClient(getActivity().getApplicationContext());     //声明LocationClient类
		mLocationClient.registerLocationListener( myListener  );    //注册监听函数
		LocationClientOption option = new LocationClientOption();
		option.setLocationMode(LocationMode.Hight_Accuracy);//设置定位模式
		option.setCoorType("bd09ll");//返回的定位结果是百度经纬度，默认值gcj02
		option.setScanSpan(5000);//设置发起定位请求的间隔时间为5000ms
		option.setIsNeedAddress(true);//返回的定位结果包含地址信息
		option.setNeedDeviceDirect(true);//返回的定位结果包含手机机头的方向
		mLocationClient.setLocOption(option);
		locData = new LocationData();
		mLocationClient.start();
		if (mLocationClient != null && mLocationClient.isStarted())
			  mLocationClient.requestLocation();
		else 
			 Log.d("Location", "locClient is null or not started");
		myLocationOverlay = new MyLocationOverlay(mMapView);
		mMapView.getOverlays().add(myLocationOverlay);
		
		mark_red = getResources().getDrawable(R.drawable.tag_task_red); 
		mark_green = getResources().getDrawable(R.drawable.tag_task_green); 
		//创建IteminizedOverlay  
		itemOverlay = new MapWorkOrderPop(mark_green, mMapView, this);  
		//将IteminizedOverlay添加到MapView中  
		mMapView.getOverlays().add(itemOverlay);
	}
	
	public void initAnimation()
	{
        //初始化动画
		animationBottomUp = new TranslateAnimation(Animation.RELATIVE_TO_SELF, 0, 
				 Animation.RELATIVE_TO_SELF, 0, 
				 Animation.RELATIVE_TO_SELF, 1,
				 Animation.RELATIVE_TO_SELF, 0);
		animationBottomUp.setDuration(300);
		animationBottomDown = new TranslateAnimation(Animation.RELATIVE_TO_SELF, 0, 
						 Animation.RELATIVE_TO_SELF, 0, 
						 Animation.RELATIVE_TO_SELF, 0,
						 Animation.RELATIVE_TO_SELF, 1);
		animationBottomDown.setDuration(300);
		animationFromLeft = new TranslateAnimation(Animation.RELATIVE_TO_SELF, -1, 
				 Animation.RELATIVE_TO_SELF, 0, 
				 Animation.RELATIVE_TO_SELF, 0,
				 Animation.RELATIVE_TO_SELF, 0);
		animationFromLeft.setDuration(300);
		animationToRight = new TranslateAnimation(Animation.RELATIVE_TO_SELF, 0, 
						 Animation.RELATIVE_TO_SELF, 1, 
						 Animation.RELATIVE_TO_SELF, 0,
						 Animation.RELATIVE_TO_SELF, 0);
		animationToRight.setDuration(300);
		animationFromRight = new TranslateAnimation(Animation.RELATIVE_TO_SELF, 1, 
				 Animation.RELATIVE_TO_SELF, 0, 
				 Animation.RELATIVE_TO_SELF, 0,
				 Animation.RELATIVE_TO_SELF, 0);
		animationFromRight.setDuration(300);
		animationToLeft = new TranslateAnimation(Animation.RELATIVE_TO_SELF, 0, 
						 Animation.RELATIVE_TO_SELF, -1, 
						 Animation.RELATIVE_TO_SELF, 0,
						 Animation.RELATIVE_TO_SELF, 0);
		animationToLeft.setDuration(300);
	}
	
	public void showPopView(int index)
	{
		//在地图上点击按钮弹出窗口
    	this.index = index;
		mMapController.animateTo(new GeoPoint(setupTasks.get(index).getTask_client_lat(), 
    			setupTasks.get(index).getTask_client_lng()));
    	tv_pop_address.setText("地址："+setupTasks.get(index).getTask_client_address());
    	tv_pop_mobile.setText("联系电话："+setupTasks.get(index).getTask_client_mobile());
    	layout_pop_view.startAnimation(animationBottomUp);
    	layout_pop_view.setVisibility(View.VISIBLE);
	}	
	
	public void updateListData()
	{
//		orderNoFinishList.clear();
//		orderNoGrabList.clear();
//		setupTaskLists.clear();
//		newIndex.clear();
		if(setupTasks == null)
		lastSetupTasks = new ArrayList<SetupTask>();
		else if(isFirstLoc == false)
			lastSetupTasks = setupTasks;
		setupTasks = app.getSetupTasks();
		orderArrayList.clear();
		for(int i=0;i<setupTasks.size();i++)
		{
			HashMap<String,String> list = new HashMap<String, String>();
			list.put("client", setupTasks.get(i).getTask_client_name());
			list.put("address", setupTasks.get(i).getTask_client_address());
			list.put("mobile", setupTasks.get(i).getTask_client_mobile());
			list.put("index", i+"");
			double distance;
			if(setupTasks.get(i).getTask_client_lat() == 0 || 
			   setupTasks.get(i).getTask_client_lng() == 0 ||
			   locState == false
			   )
				list.put("distance", "未知");
			else
			{
				distance = DistanceUtil.getDistance(new GeoPoint((int)(locData.latitude*1e6), (int)(locData.longitude*1e6)), 
					  new GeoPoint(setupTasks.get(i).getTask_client_lat(), setupTasks.get(i).getTask_client_lng()));
				//保留两位小树
				list.put("distance",(double)Math.round((double)(distance/1000*100))/100+" km");
			}
			if(setupTasks.get(i).getTask_status().equals("00"))
			{
				orderArrayList.add(list);
				list.put("new", "新");
			}
			if(isFirstLoc == false)
			{
				for(int j=0;j<lastSetupTasks.size();j++)
				{
					if(lastSetupTasks.get(j).getTask_id().equals(setupTasks.get(i).getTask_id()))
						list.put("new", "");
				}
			}
		}
		spOrder.notifyDataSetChanged();
//		for(int i=0;i<setupTasks.size();i++)
//		{
//			if(setupTasks.get(i).getTask_status().equals("00"))
//			{
//				boolean isContains = false;
//				for(int j=0;j<lastSetupTasks.size();j++)
//				{
//					if(setupTasks.get(j).getTask_id().equals(lastSetupTasks.get(j).getTask_id()))
//					{
//						isContains = true;
//					}
//				}
//				if(isContains == false)
//				{
//					newIndex.add(new Integer(i));
//				}
//			}
//		}
//		for(int i=0;i<setupTasks.size();i++)
//		{
//			if(setupTasks.get(i).getTask_status().equals("00"))
//			{
//				orderNoGrabList.add(setupTasks.get(i));
//			}
//			else if(setupTasks.get(i).getTask_status().equals("01"))
//			{
//				orderNoFinishList.add(setupTasks.get(i));
//			}
//		}
//		Pair<String,List<SetupTask>> list = new Pair<String, List<SetupTask>>("未完成工单", orderNoFinishList);
//		setupTaskLists.add(list);
//		list = new Pair<String, List<SetupTask>>("未被抢工单", orderNoGrabList);
//		setupTaskLists.add(list);
//		orderAdapter.notifyDataSetChanged();
	}
	
	public void updateMapData()
	{
		itemOverlay.removeAll();			
		for(int i=0;i<setupTasks.size();i++)
		{
			GeoPoint point1 = new GeoPoint(setupTasks.get(i).getTask_client_lat(),setupTasks.get(i).getTask_client_lng());
			OverlayItem item = new OverlayItem(point1, i+"", "item");
			if(setupTasks.get(i).getTask_status().equals("01"))
				item.setMarker(mark_red);
			itemOverlay.addItem(item);
		}		     
		mMapView.refresh();
	}
	//返回键逻辑
	public boolean excuteBack()
	{
		if(state == STATE_MAP)
		{
			image_title_right.setVisibility(View.VISIBLE);
//			layout_list.setVisibility(View.VISIBLE);
			layout_map.setVisibility(View.GONE);
			layout_pop_view.setVisibility(View.GONE);
			image_title_left.setVisibility(View.GONE);
			state = STATE_LIST;
			return true;
		}
//		else if(state == STATE_SEARCH)
//		{
//			routesArrayList.clear();
//			if(mMapView.getOverlays().contains(routeOverlay))
//		    {
//			    mMapView.getOverlays().add(itemOverlay);
//			    mMapView.getOverlays().remove(routeOverlay);
//		    }		
//			state = stateBeforeSearch;	
//			if(state == STATE_TASK_DETAIL)
//			{
//				layout_search.startAnimation(animationToRight);
//				layout_task_detail.startAnimation(animationFromLeft);
//				layout_task_detail.setVisibility(View.VISIBLE);
//				layout_search.setVisibility(View.GONE);
//			}
//			else if(state == STATE_MAP)
//			{				
//				radio_tab.startAnimation(animationBottomUp);		
//				image_title_right.setVisibility(View.GONE);
//				layout_search.setVisibility(View.GONE);
//				radio_tab.setVisibility(View.VISIBLE);
//				image_title_left.setVisibility(View.VISIBLE);
//				layout_title.setVisibility(View.VISIBLE);
//				layout_map.setVisibility(View.VISIBLE);
//			}
//			return true;
//		}
//		else if(state == STATE_SEARCH_LIST)
//		{
//			layout_search.startAnimation(animationFromLeft);
//			layout_search_result.startAnimation(animationToRight);
//			layout_search_result.setVisibility(View.GONE);
//			layout_title.setVisibility(View.GONE);
//			layout_search.setVisibility(View.VISIBLE);
//	        routeDetailArrayList.clear();
//		    if(mMapView.getOverlays().contains(routeOverlay))
//		    {
//			    mMapView.getOverlays().add(itemOverlay);
//			    mMapView.getOverlays().remove(routeOverlay);
//		    }
//		    if(mMapView.getOverlays().contains(transitOverlay))
//		    {
//			    mMapView.getOverlays().add(itemOverlay);
//			    mMapView.getOverlays().remove(transitOverlay);
//		    }
//			state = STATE_SEARCH;
//			return true;
//		}
//		else if(state == STATE_SEARCH_MAP)
//		{
//			radio_tab.startAnimation(animationBottomDown);
//			radio_tab.setVisibility(View.GONE);
//			layout_map.setVisibility(View.GONE);
//			layout_title.setVisibility(View.GONE);
//			layout_search_result.setVisibility(View.VISIBLE);
//			state = STATE_SEARCH_LIST;
//			return true;
//		}
		else if(state == STATE_TASK_DETAIL)
		{
			state = stateBeforeDetail;
			if(state == STATE_LIST)
			{				
				layout_task_detail.setVisibility(View.GONE);
				image_title_right.setVisibility(View.VISIBLE);
//				layout_list.setVisibility(View.VISIBLE);
			}
			else if(state == STATE_MAP)
			{
				image_title_right.setVisibility(View.GONE);
				layout_task_detail.setVisibility(View.GONE);
				layout_map.setVisibility(View.VISIBLE);
			}
			radio_tab.startAnimation(animationBottomUp);
			layout_title.setVisibility(View.VISIBLE);
			radio_tab.setVisibility(View.VISIBLE);
			list_task_detail.setVisibility(View.GONE);
			return true;
		}
		return false;
	}
	
//	Handler handler = new Handler();	
//	Runnable zoomMap = new Runnable(){
//		//延时缩放，否则地图未显示出来，缩放造成程序死掉
//		@Override
//		public void run() {
//			// TODO Auto-generated method stub
//			while(mMapView.isShown() == false)
//			{
//				
//			}
//			if(mMapView.getOverlays().contains(transitOverlay))
//			{
//				mMapController.zoomToSpan(transitOverlay.getLatSpanE6(), transitOverlay.getLonSpanE6());
//				mMapController.animateTo(transitOverlay.getCenter());
//			}
//			else if(mMapView.getOverlays().contains(routeOverlay))
//			{
//				mMapController.zoomToSpan(routeOverlay.getLatSpanE6(), routeOverlay.getLonSpanE6());
//			    mMapController.animateTo(routeOverlay.getCenter());
//			}
//		}		
//	};
	
	JsonHttpResponseHandler modifyUserStatusOnHandler = new JsonHttpResponseHandler(){
		@Override
		public void onSuccess(JSONObject result) {
			try {
				if(result.getBoolean("success") == true)
				{
					button_online.setBackgroundResource(R.drawable.button_online);
					button_online.setText("在线");
					getActivity().startService(intent);
					app.isOnline = true;
				}
				else
				{
					Log.e(TAG, result.getString("info"));
				}
			} catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	};
	
	JsonHttpResponseHandler modifyUserStatusOffHandler = new JsonHttpResponseHandler(){
		@Override
		public void onSuccess(JSONObject result) {
			try {
				if(result.getBoolean("success") == true)
				{
					button_online.setBackgroundResource(R.drawable.button_offline);
					button_online.setText("离线");
					getActivity().stopService(intent);
					app.isOnline = false;
				}
				else
				{
					Log.e(TAG, result.getString("info"));
				}
			} catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	};
	
//	class searchAsyncTask extends AsyncTask<Integer, Integer, String>{
//
//		@Override
//		protected String doInBackground(Integer... params) {
//			// TODO Auto-generated method stub
//			while(start == null || end == null)
//			{
//			}
//			//查询到起点和终点的坐标
//			return "yes";			
//		}
//		@Override  
//		protected void onPostExecute(String s){
//			if(s.equals("yes"))
//			{
//				MKPlanNode pStart = new MKPlanNode(); 
//				MKPlanNode pEnd = new MKPlanNode();
//				pStart.pt = start.geoPt;
//				pEnd.pt = end.geoPt;
//				switch(radio_way.getCheckedRadioButtonId())
//				{
//					case R.id.button_bus:
//						mMKSearch.transitSearch(city, pStart, pEnd);
//						break;
//					case R.id.button_car:
//						if(routesArrayList.size() != 0)
//						{
//							routesArrayList.clear();
//						}
//						mMKSearch.setDrivingPolicy(MKSearch.ECAR_TIME_FIRST);  
//						mMKSearch.drivingSearch(city, pStart, city, pEnd);
//						break;
//					case R.id.button_walk:
//						if(routesArrayList.size() != 0)
//						{
//							routesArrayList.clear();
//						}
//						mMKSearch.walkingSearch(city, pStart, city, pEnd);
//						break;
//					default:
//						break;	
//				}
//			}
//		}
//	}
	
//	@Override
//	public void onGetDrivingRouteResult(MKDrivingRouteResult result, int iError) {
//		// TODO Auto-generated method stub
//	        if (result == null) 
//	        {  
//	        	Toast.makeText(getActivity(), "网络异常", Toast.LENGTH_SHORT).show();
//	        	return;  
//			}
//		    routeOverlay = new RouteOverlay(getActivity(), mMapView);  // 此处仅展示一个方案作为示例  
//		    MKRoute route = result.getPlan(0).getRoute(0); //暂时只选择第一条路线
//		    routeOverlay.setData(route);
//		    HashMap<String,String> list1 = new HashMap<String, String>();
//		    list1.put("content", edit_start.getText().toString() + " 到 " + edit_end.getText().toString());
//		    list1.put("distance", "总距离："+ switchDistance(route.getDistance()));
//	    	list1.put("time", "预计时间："+ switchTime(route.getTime()));
//	    	routeDetailArrayList.add(list1);
//		    //将每一步用list呈现
//			for(int i=0;i<route.getNumSteps();i++)
//			{
//				HashMap<String,String> list = new HashMap<String, String>();
//				list.put("content", route.getStep(i).getContent());
//				routeDetailArrayList.add(list);
//			}
//			//用户已经取消搜索
//			if(searchDialog.isShowing() == false)
//				return;
//	        spRouteDetail.notifyDataSetChanged();
//	        searchDialog.dismiss();	
//		    mMapView.getOverlays().remove(itemOverlay);
//		    mMapView.getOverlays().add(routeOverlay); 
//		    mMapView.refresh();
//		    layout_search.startAnimation(animationToLeft);
//		    layout_title.startAnimation(animationFromRight);
//		    layout_search_result.startAnimation(animationFromRight);
//		    layout_search.setVisibility(View.GONE);
//		    layout_search_result.setVisibility(View.VISIBLE);
//		    state = STATE_SEARCH_LIST;
//		}
//
//	@Override
//	public void onGetTransitRouteResult(final MKTransitRouteResult result, int iError) {
//		// TODO Auto-generated method stub
//        if (result == null) 
//        {  
//        	Toast.makeText(getActivity(), "网络异常", Toast.LENGTH_SHORT).show();
//        	return;  
//		}
//	    for(int i=0;i<result.getNumPlan();i++)
//	    {
//	    	MKTransitRoutePlan route = result.getPlan(i);
//			HashMap<String,String> list = new HashMap<String, String>();
//			list.put("content", "路线"+(i+1)+"："+route.getContent());
//			list.put("distance", "距离"+switchDistance(route.getDistance()));
//			list.put("time", "预计时间："+ switchTime(route.getTime()));
//			routesArrayList.add(list);
//	    }
//		//用户已经取消搜索
//		if(searchDialog.isShowing() == false)
//			return;
//	    spRoutes.notifyDataSetChanged();
//	    searchDialog.dismiss();
//	    list_routes.setOnItemClickListener(new OnItemClickListener() {
//	    	//展示对应路线的详细情况
//			@Override
//			public void onItemClick(AdapterView<?> parent, View view, int position,
//					long id) {
//				// TODO Auto-generated method stub
//				MKTransitRoutePlan route = result.getPlan(position);
//		 	    transitOverlay = new TransitOverlay(getActivity(), mMapView);
//				transitOverlay.setData(route);
//			    //将每一步用list呈现
//			    int numLines = route.getNumLines();
//			    int numRoute = route.getNumRoute();	
//			    for(int i=0; i<numLines; i++)
//			    {			    	
//			    	HashMap<String,String> list1 = new HashMap<String, String>();
//			    	HashMap<String,String> list2 = new HashMap<String, String>();
//			    	list1.put("content", "步行"+route.getRoute(i).getDistance()+"米 至 "+
//											   route.getLine(i).getGetOnStop().name);
//			    	routeDetailArrayList.add(list1);
//			    	list2.put("content", "乘坐"+route.getLine(i).getTitle()+"，在"+
//											   route.getLine(i).getGetOnStop().name+"上车，经过"+
//											   route.getLine(i).getNumViaStops()+"站，到达"+
//											   route.getLine(i).getGetOffStop().name);
//					routeDetailArrayList.add(list2);
//			    }
//			    HashMap<String,String> list = new HashMap<String, String>();
//			    list.put("content", "步行"+route.getRoute(numRoute-1).getDistance()+"米 到达  终点");
//			    routeDetailArrayList.add(list);
//		        spRouteDetail.notifyDataSetChanged();
//			    mMapView.getOverlays().remove(itemOverlay);
//			    mMapView.getOverlays().add(transitOverlay);
//			    mMapView.refresh();	
//			    layout_search.startAnimation(animationToLeft);
//			    layout_title.startAnimation(animationFromRight);
//			    layout_search_result.startAnimation(animationFromRight);
//			    layout_search.setVisibility(View.GONE);
//			    layout_search_result.setVisibility(View.VISIBLE);
//			    state = STATE_SEARCH_LIST;
//			}
//		});
//	}
//	
//	@Override
//	public void onGetWalkingRouteResult(MKWalkingRouteResult result, int iError) {
//		// TODO Auto-generated method stub
//        if (result == null) 
//        {  
//        	Toast.makeText(getActivity(), "网络异常", Toast.LENGTH_SHORT).show();
//        	return;  
//		}
//	    routeOverlay = new RouteOverlay(getActivity(), mMapView);  // 此处仅展示一个方案作为示例  
//	    MKRoute route = result.getPlan(0).getRoute(0); //暂时只选择第一条路线
//	    routeOverlay.setData(route);
//		HashMap<String,String> list1 = new HashMap<String, String>();
//	    list1.put("content", edit_start.getText().toString() + " 到 " + edit_end.getText().toString());
//		list1.put("distance", "总距离：" + switchDistance(route.getDistance()));
//    	list1.put("time", "预计时间：" + switchTime(route.getTime()));
//    	routeDetailArrayList.add(list1);
//	    //将每一步用list呈现
//		for(int i=0;i<route.getNumSteps();i++)
//		{
//			HashMap<String,String> list = new HashMap<String, String>();
//			list.put("content", route.getStep(i).getContent());
//			routeDetailArrayList.add(list);
//		}
//		//用户已经取消搜索
//		if(searchDialog.isShowing() == false)
//			return;
//        spRouteDetail.notifyDataSetChanged();
//        searchDialog.dismiss();
//	    mMapView.getOverlays().remove(itemOverlay);
//	    mMapView.getOverlays().add(routeOverlay); 
//	    mMapView.refresh();
//	    layout_search.startAnimation(animationToLeft);
//	    layout_title.startAnimation(animationFromRight);
//	    layout_search_result.startAnimation(animationFromRight);
//	    layout_search.setVisibility(View.GONE);
//	    layout_search_result.setVisibility(View.VISIBLE);
//	    state = STATE_SEARCH_LIST;
//	}
//	
//	@Override
//	public void onGetAddrResult(MKAddrInfo res, int error) {
//		// TODO Auto-generated method stub
//		if (error != 0) {
//			String str = String.format("错误号：%d", error);
//			Log.w("BaiduMap",str+"!!!");
//			searchDialog.dismiss();
//			return;
//		}
//		if (res.type == MKAddrInfo.MK_GEOCODE){
//			//地理编码：通过地址检索坐标点
//			if(which.equals("start"))
//			{
//				start = res;		
//				mMKSearch.geocode(edit_end.getText().toString(), city);
//				which = "end";
//				String strInfo = String.format("纬度：%f 经度：%f", res.geoPt.getLatitudeE6()/1e6, res.geoPt.getLongitudeE6()/1e6);
//				Log.i("start",strInfo);
//				return;
//			}
//			if(which.equals("end"))
//			{
//				edit_end.setText(res.strAddr);
//				String strInfo = String.format("纬度：%f 经度：%f", res.geoPt.getLatitudeE6()/1e6, res.geoPt.getLongitudeE6()/1e6);
//				Log.i("end",strInfo);
//				end = res;			
//			}
//		}
//	}
//	
//	@Override
//	public void onGetPoiDetailSearchResult(int arg0, int arg1) {
//		// TODO Auto-generated method stub
//		
//	}
//
//	@Override
//	public void onGetPoiResult(MKPoiResult arg0, int arg1, int arg2) {
//		// TODO Auto-generated method stub
//		
//	}
//
//	@Override
//	public void onGetShareUrlResult(MKShareUrlResult arg0, int arg1, int arg2) {
//		// TODO Auto-generated method stub
//		
//	}
//
//	@Override
//	public void onGetSuggestionResult(MKSuggestionResult arg0, int arg1) {
//		// TODO Auto-generated method stub
//		
//	}
//	
//	@Override
//	public void onGetBusDetailResult(MKBusLineResult result, int iError) {
//		// TODO Auto-generated method stub
//	}
//	
//	public String switchTime(int number)
//	{
//	    String time;
//    	if(number/60 == 0)
//    		time = "1分钟";
//    	else if(number/60 < 60)
//    		time = number/60 + "分钟";
//    	else
//    		time = number/3600 + "小时" + number/60 + "分钟";
//    	return time;
//	}
//	
//	public String switchDistance(int number)
//	{
//    	String distance;
//		if(number > 2000)
//    		distance = (float)(number/100)/10 + "km";
//    	else
//    		distance = number + "m";
//		return distance;
//	}
//	
	JsonHttpResponseHandler grabWorkOrderHandler = new JsonHttpResponseHandler() {
		
		@Override
		public void onSuccess(JSONObject result) {
			try {
				if(result.getBoolean("success") == true)
				{
					AppSetupUser user = DbUtil.getAppSetupUserDao().queryBuilder().
												where(Properties.User_name_spell.eq(app.userName)).
												list().get(0);
					String user_id = user.getUser_id();
					setupTasks.get(index).setTask_status("10");
					setupTasks.get(index).setTask_get_userid(user_id);
					user.setUser_total_credits(user.getUser_total_credits() + setupTasks.get(index).getTask_grab_credits());
					user.setUser_year_credits(user.getUser_year_credits() + setupTasks.get(index).getTask_grab_credits());
					user.setUser_month_credits(user.getUser_month_credits() + setupTasks.get(index).getTask_grab_credits());
					user.setUser_week_credits(user.getUser_week_credits() + setupTasks.get(index).getTask_grab_credits());
					DbUtil.getSetupTaskDao().update(setupTasks.get(index));
					DbUtil.getAppSetupUserDao().update(user);
					tv_status_green.setText("我的");
					Toast.makeText(app, "抢单成功", Toast.LENGTH_SHORT).show();
				}
				else
				{
					Toast.makeText(app, result.getString("info"), Toast.LENGTH_SHORT).show();
				}
			} catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}	
	};	
//	
    BroadcastReceiver myReceiver = new BroadcastReceiver() {
		//由service告诉OrderFragment需要更新数据了
		@Override
		public void onReceive(Context context, Intent intent) {
			// TODO Auto-generated method stub
			if(intent.getAction().equals("com.ebupt.orderreceiver"))
			{
				updateMapData();
				updateListData();
			}
		}
	};	
	
	BDLocationListener myListener = new BDLocationListener(){
		//定位相关
		@Override
		public void onReceiveLocation(BDLocation location) {
			// TODO Auto-generated method stub
		      if (location == null || location.getLatitude() == 4.9E-324
		    		  			   || location.getLongitude() == 4.9E-324)
		      {
		          return;
		      }		      
		      locData.latitude = location.getLatitude();
		      locData.longitude = location.getLongitude();  
		      locData.direction = location.getDirection();
		      address = location.getAddrStr();
		      city = location.getCity();		     
		      locState = true;
//		      locData.latitude = 25.1f;    //测试用数据
//		      locData.longitude = 102.73f; 
//		      address = "荷塘月色";
//		      city = "云南";
			  myLocationOverlay.setData(locData);
			  mMapView.refresh();
			  if(isFirstLoc == true)
			  {
				  mMapController.animateTo(new GeoPoint((int)(locData.latitude*1e6),
						  (int)(locData.longitude* 1e6)));
				  updateListData();
				  updateMapData();
				  isFirstLoc = false;
			  }			 
		}

		@Override
		public void onReceivePoi(BDLocation arg0) {
			// TODO Auto-generated method stub
			
		}
	};
	
	@Override
	public void onDestroy(){
	        mMapView.destroy();
	        mLocationClient.stop();
			getActivity().unregisterReceiver(myReceiver);
	        super.onDestroy();
	}
	@Override
	public void onPause(){
	        mMapView.onPause();
	        super.onPause();
	}
	@Override
	public void onResume(){
	        mMapView.onResume();
	       super.onResume();
	}		
}