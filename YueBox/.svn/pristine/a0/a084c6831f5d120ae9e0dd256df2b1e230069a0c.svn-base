package com.ebupt.yuebox.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ebupt.yuebox.model.WodAppPicture;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table WOD_APP_PICTURE.
*/
public class WodAppPictureDao extends AbstractDao<WodAppPicture, String> {

    public static final String TABLENAME = "WOD_APP_PICTURE";

    /**
     * Properties of entity WodAppPicture.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Picture_id = new Property(0, String.class, "picture_id", true, "PICTURE_ID");
        public final static Property Picture_uptime = new Property(1, Long.class, "picture_uptime", false, "PICTURE_UPTIME");
        public final static Property Picture_name = new Property(2, String.class, "picture_name", false, "PICTURE_NAME");
        public final static Property Picture_url = new Property(3, String.class, "picture_url", false, "PICTURE_URL");
        public final static Property Picture_task_id = new Property(4, Long.class, "picture_task_id", false, "PICTURE_TASK_ID");
        public final static Property Picture_user_id = new Property(5, Long.class, "picture_user_id", false, "PICTURE_USER_ID");
    };


    public WodAppPictureDao(DaoConfig config) {
        super(config);
    }
    
    public WodAppPictureDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'WOD_APP_PICTURE' (" + //
                "'PICTURE_ID' TEXT PRIMARY KEY NOT NULL ," + // 0: picture_id
                "'PICTURE_UPTIME' INTEGER," + // 1: picture_uptime
                "'PICTURE_NAME' TEXT," + // 2: picture_name
                "'PICTURE_URL' TEXT," + // 3: picture_url
                "'PICTURE_TASK_ID' INTEGER," + // 4: picture_task_id
                "'PICTURE_USER_ID' INTEGER);"); // 5: picture_user_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'WOD_APP_PICTURE'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, WodAppPicture entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getPicture_id());
 
        Long picture_uptime = entity.getPicture_uptime();
        if (picture_uptime != null) {
            stmt.bindLong(2, picture_uptime);
        }
 
        String picture_name = entity.getPicture_name();
        if (picture_name != null) {
            stmt.bindString(3, picture_name);
        }
 
        String picture_url = entity.getPicture_url();
        if (picture_url != null) {
            stmt.bindString(4, picture_url);
        }
 
        Long picture_task_id = entity.getPicture_task_id();
        if (picture_task_id != null) {
            stmt.bindLong(5, picture_task_id);
        }
 
        Long picture_user_id = entity.getPicture_user_id();
        if (picture_user_id != null) {
            stmt.bindLong(6, picture_user_id);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public WodAppPicture readEntity(Cursor cursor, int offset) {
        WodAppPicture entity = new WodAppPicture( //
            cursor.getString(offset + 0), // picture_id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // picture_uptime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // picture_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // picture_url
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // picture_task_id
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5) // picture_user_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, WodAppPicture entity, int offset) {
        entity.setPicture_id(cursor.getString(offset + 0));
        entity.setPicture_uptime(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setPicture_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPicture_url(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPicture_task_id(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setPicture_user_id(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(WodAppPicture entity, long rowId) {
        return entity.getPicture_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(WodAppPicture entity) {
        if(entity != null) {
            return entity.getPicture_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
