package com.ebupt.yuebox.ui;

import java.util.List;

import org.json.JSONException;
import org.json.JSONObject;

import android.content.Intent;
import android.content.SharedPreferences;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentTransaction;
import android.util.Log;
import android.view.KeyEvent;
import android.view.View;
import android.view.Window;
import android.widget.ImageView;
import android.widget.RadioGroup;
import android.widget.RadioGroup.OnCheckedChangeListener;
import android.widget.TextView;
import android.widget.Toast;

import cn.jpush.android.api.JPushInterface;

import com.ebupt.yuebox.R;
import com.ebupt.yuebox.application.MyApplication;
import com.ebupt.yuebox.database.DbUtil;
import com.ebupt.yuebox.fragment.MyFragment;
import com.ebupt.yuebox.fragment.OrderFragment;
import com.ebupt.yuebox.fragment.RankFragment;
import com.ebupt.yuebox.model.AppSetupUser;
import com.ebupt.yuebox.model.SetupTask;
import com.ebupt.yuebox.model.TimeStamp;
import com.ebupt.yuebox.net.NetEngine;
import com.ebupt.yuebox.service.MyService;
import com.ebupt.yuebox.util.JsonParser;
import com.loopj.android.http.JsonHttpResponseHandler;
//import com.ebupt.yuebox.util.DisplayUtil;

/**
 * @ClassName MainActivity
 * @Description 主界面,底部有3个按钮控制页面
 * @author ZhouZheChen
 * @date 2014-03-12
 * @RevisionHistory
 */

public class MainActivity extends FragmentActivity{
	public static String currentTab = "";// 当前选中的tab栏
	private FragmentManager fm;
	private long mExitTime;
	private RadioGroup tab_group;// 底部tab栏
	private TextView textview_title;  //顶部标题栏文字
	private ImageView image_title_right;
	private ImageView image_title_left;
	private int orderState;  //列表模式或地图模式，保证tab切换后保留之前的显示状态
	private SharedPreferences timeStampShared;
	private Intent intent;
	private final static String TAG = "MainActivity";
	private final static int ORDER_LIST = 1;
	private final static int ORDER_MAP = 2;	
	private final static String TAB_ORDER = "0";
	private final static String TAB_MY = "1";
	private final static String TAB_RANK = "2";


	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		setContentView(R.layout.activity_main);
		MyApplication.getInstance().addActivity(this);//每个activity都存入容器，以便退出时使用		
		intent = new Intent(MainActivity.this,MyService.class);
		fm = getSupportFragmentManager();
		timeStampShared = getSharedPreferences("time_stamp", 0);
//		DisplayUtil.init(this);
		initResource();
		JPushInterface.resumePush(this);	
		NetEngine.getTimeStamp(getTimeStampHandler);	
		NetEngine.getAllData(getAllDataHandler, MyApplication.getInstance().userName, MyApplication.getInstance().password);
	}
		
	JsonHttpResponseHandler getTimeStampHandler = new JsonHttpResponseHandler() {
		
		@Override
		public void onSuccess(JSONObject result) {
			try {
				//对比本地时间戳，如果过期则向服务器请求数据
				TimeStamp timeStamp = new TimeStamp();
				if(result.getBoolean("success") == true)
					timeStamp = JsonParser.parseTimeSamp(result.getString("data"));
				if(timeStamp.getWOTimeStamp() > timeStampShared.getLong("WOTimeStamp", 0) || 
				   timeStamp.getTSTimeStamp() > timeStampShared.getLong("TSTimeStamp", 0) )
				{
					startService(intent);
				}
			} catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}	
	};	

	JsonHttpResponseHandler getAllDataHandler = new JsonHttpResponseHandler(){
		@Override
		public void onSuccess(JSONObject result) {
			try {
				if(result.getBoolean("success") == true)
				{//将获取的用户信息存储数据库，并广播通知UI刷新
					JSONObject data = new JSONObject(result.getString("data"));					
					timeStampShared.edit().putLong("WOTimeStamp", data.getLong("WOTimeStamp")).commit();
					List<SetupTask> setupTasks = JsonParser.parseSetupTask(data.getString("WorkOrderList"));
					DbUtil.addSetupTask(setupTasks);
			    	 
					timeStampShared.edit().putLong("TSTimeStamp", data.getLong("TSTimeStamp")).commit();
					List<AppSetupUser> appSetupUsers = JsonParser.parseAppSetupUser(data.getString("TaskReceiver"));
					DbUtil.addAppSetupUser(appSetupUsers);
					((MyApplication) getApplication()).uploadData();
			    	Intent intent = new Intent("com.ebupt.orderreceiver");
			    	sendBroadcast(intent);
				}
				else
				{
					Log.e(TAG, "获取用户信息失败，"+result.getString("info"));
				}
			} catch (JSONException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}		
	};
	/**
	 * 初始化各类控件资源
	 */  
	public void initResource() {
		tab_group = (RadioGroup) findViewById(R.id.radio_tab);
		textview_title = (TextView) findViewById(R.id.textview_title);
		image_title_left = (ImageView) findViewById(R.id.image_title_left);
		image_title_right = (ImageView) findViewById(R.id.image_title_right);
		tab_group.setOnCheckedChangeListener(new OnCheckedChangeListener() {

			public void onCheckedChanged(RadioGroup group, int checkedId) {
				// hideInput();
				FragmentTransaction tr = fm.beginTransaction();
				Fragment currentFragment = fm.findFragmentByTag(currentTab);
				if (currentFragment != null)
					tr.hide(currentFragment);
				Fragment toaddFragment = null;
				switch (checkedId) {
				case R.id.main_tab_class:
					currentTab = TAB_ORDER;
					toaddFragment = fm.findFragmentByTag(currentTab);
					if (toaddFragment == null)
						toaddFragment = new OrderFragment();
					if(orderState == ORDER_LIST)
						image_title_left.setVisibility(View.VISIBLE);
					else if(orderState == ORDER_MAP)
						image_title_right.setVisibility(View.VISIBLE);
					textview_title.setText("工单信息");
					break;
				case R.id.main_tab_my:
					currentTab = TAB_MY;
					if(image_title_right.isShown())
						orderState = ORDER_MAP;
					else if(image_title_left.isShown())
						orderState = ORDER_LIST;
					toaddFragment = fm.findFragmentByTag(currentTab);
					if (toaddFragment == null)
					   toaddFragment = new MyFragment();
					image_title_left.setVisibility(View.GONE);
					image_title_right.setVisibility(View.GONE);
					textview_title.setText("我的信息");
					break;
				case R.id.main_tab_settings:
					currentTab = TAB_RANK;
					if(image_title_right.isShown())
						orderState = ORDER_MAP;
					else if(image_title_left.isShown())
						orderState = ORDER_LIST;
					toaddFragment = fm.findFragmentByTag(currentTab);
					if (toaddFragment == null)
						toaddFragment = new RankFragment();
					image_title_left.setVisibility(View.GONE);
					image_title_right.setVisibility(View.GONE);
					textview_title.setText("排行榜");
					break;
				default:
					toaddFragment = currentFragment;
					break;
				}

				if (toaddFragment.isAdded()) {
					tr.show(toaddFragment);
				} else {
					tr.add(R.id.maincontent, toaddFragment, currentTab);
					tr.show(toaddFragment);
				}
				tr.commitAllowingStateLoss();
			}
		});

		if (currentTab == null || currentTab.equals(""))
		{
			currentTab = TAB_ORDER;
			textview_title.setText("工单信息");
		}
		showFragment(TAB_ORDER);
	}

	/**
	 * 根据fragmentTag来决定显示哪个fragment
	 * 
	 * @param fragmentTag
	 */
	public void showFragment(String fragmentTag) {
		FragmentTransaction tr = fm.beginTransaction();
		Fragment currentFragment = fm.findFragmentByTag(currentTab);
		if (currentFragment != null)
			tr.hide(currentFragment);
		currentTab = fragmentTag;
		Fragment toaddFragment = null;
		toaddFragment = fm.findFragmentByTag(fragmentTag);
		if (toaddFragment == null) {
			if (fragmentTag.equals(TAB_ORDER)) {
				toaddFragment = new OrderFragment();
			} else if (fragmentTag.equals(TAB_MY)) {
				toaddFragment = new MyFragment();
			} else if (fragmentTag.equals(TAB_RANK)) {
				toaddFragment = new RankFragment();
			}
		}
		if (!toaddFragment.isAdded())
			tr.add(R.id.maincontent, toaddFragment, currentTab);
		tr.show(toaddFragment);
		tr.commit();
	}
	
	//--点击两次back键退出程序---------------
    public boolean onKeyDown(int keyCode,KeyEvent event) {
        if (keyCode == KeyEvent.KEYCODE_BACK) {
        		if(currentTab.equals(TAB_ORDER) && ((OrderFragment) fm.findFragmentByTag(currentTab)).excuteBack())
        			return true;
                if ((System.currentTimeMillis() - mExitTime) > 2000) {
                        Object mHelperUtils;
                        Toast.makeText(this, "再按一次退出程序", Toast.LENGTH_SHORT).show();
                        mExitTime = System.currentTimeMillis();
                } else {
                       // finish();
                        //System.exit(0);
                       // android.os.Process.killProcess(android.os.Process.myPid()); 
        	        JPushInterface.stopPush(this);
        	        stopService(intent);
        			DbUtil.deleteOrderWithNoUser();
                	MyApplication.getInstance().exit();            		
                }
                return true;
        }
        return super.onKeyDown(keyCode, event);
    }	
}
